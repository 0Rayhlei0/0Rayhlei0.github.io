<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HideOnRubbish | RayHLei</title>
    <link>http://raylei.space/</link>
    
    <atom:link href="http://raylei.space/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个给保险公司做数据分析的人</description>
    <pubDate>Sun, 13 Feb 2022 13:29:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[博客维护] 使用Typora和PicGo简单便捷地编辑带图博文</title>
      <link>http://raylei.space/2022/02/12/2-typora_picgo_config/</link>
      <guid>http://raylei.space/2022/02/12/2-typora_picgo_config/</guid>
      <pubDate>Sat, 12 Feb 2022 09:50:16 GMT</pubDate>
      
      <description>本文介绍了如何使用Markdown编辑器Typora及配套图片管理软件PicGo便捷地编辑和管理博文。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>网站已经搭好了，但是怎么样编辑并且发布文章呢？我们知道网站中的文章都是作者按照排版需求使用Markdown语法写出.md后缀文件(既Markdown文件)并以此生成相应的html文件供浏览器读取展示，而插入图片的方法却只能使用路径引用的方法非常繁琐。本文将介绍在Hexo框架下发博文的方法，以及如何使用md编辑器<a href="https://typora.io/" title="Typora Website">Typora</a>与图床管理软件<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed-tcyun" title="PicGo-Core Documentation">PicGo</a>来简单便捷地编辑图文。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="创建博文"><a href="#创建博文" class="headerlink" title="创建博文"></a>创建博文</h2><p>先介绍一些在Hexo中发文的基础知识。</p><h3 id="Hexo框架下博文的保存"><a href="#Hexo框架下博文的保存" class="headerlink" title="Hexo框架下博文的保存"></a>Hexo框架下博文的保存</h3><p>在我们安装的<a href="https://hexo.io/docs/setup" title="Setup for Hexo">Hexo</a>的根目录下与Hexo有关的分别是下面四个，他们的作用分别如下：</p><ul><li><strong>scaffolds:</strong> 模板文件夹，保存了草稿，页面和文章这三类md文件的模板，新建的该类文件内容将与模板一致。</li><li><strong>source:</strong> 保存网站内容的文件夹，其中的<code>_post</code>子文件夹即是保存md格式博文的文件夹。<code>source文件夹</code>中的所有可渲染文件(例如markdown和html)都将被渲染并被放入<code>public文件夹</code>，其他类型文件则会被直接复制。</li><li><strong>public:</strong> 保存网站原码的文件夹，这个文件夹中的内容将被推出并托管在<code>GitHub Pages</code>上形成网页。</li><li><strong>theme:</strong> 保存Hexo主题文件的文件夹，Hexo会同时基于网站内容和主题文件来生成相应的静态文件。</li></ul><p>也就是说我们的博文其实就是保存在<code>source/_post</code>文件夹中的md文件，即创建txt文件后改后缀成md，只要在文件开头—分隔符内(即<code>front-matter</code>)写上必要的配置如标题，日期等，这个md文件便会被识别渲染为一篇博文。</p><h3 id="Hexo新建页面-x2F-博文命令"><a href="#Hexo新建页面-x2F-博文命令" class="headerlink" title="Hexo新建页面&#x2F;博文命令"></a>Hexo新建页面&#x2F;博文命令</h3><p>即使只要放入md文件即可被渲染成网页，Hexo依然提供了更方便的创建新页面或博文的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt; <span class="comment">#layout若不填则自动按post模板创建，title将同时被用于文件名和frontmatter中的title参数</span></span><br></pre></td></tr></table></figure><p>hexo命令创建三类文件的方式分别如下：</p><ul><li><strong>Page(页面)</strong>: 在<code>source</code>文件夹下创建一个指定名称的路径，并在里面创建一个index.md文件，该文件中内容将显示在页面上。</li><li><strong>Draft(草稿)</strong>: 在<code>source/_drafts</code>文件夹中创建一个草稿，该文件不会被展示在页面上，但可以被用<code>hexo pubilish [layout] &lt;filename&gt;</code>命令发布。</li><li><strong>Post(博文)</strong>: 若<code>new</code>命令没有指定<code>layout</code>则将默认创建该类型，此类型被创建在<code>source/_post</code>文件夹中，会被直接渲染为博文。</li></ul><h2 id="使用Typora和PicGo编辑博文"><a href="#使用Typora和PicGo编辑博文" class="headerlink" title="使用Typora和PicGo编辑博文"></a>使用Typora和PicGo编辑博文</h2><p>知道了Hexo下发博的基本知识，现在终于来到正题，如何方便快捷地编辑一篇图文并茂的博文呢？我的选择是Typora与其绑定的图床管理软件PicGo Core。</p><h3 id="Typora是什么"><a href="#Typora是什么" class="headerlink" title="Typora是什么"></a>Typora是什么</h3><p>Typora是一款专门用来编辑Markdown文件的编辑软件，他的最大特点便是”所见即所得“。在这个软件中你可以使用markdown语法来调整你的文章展示，而你写下的格式语法会被Typora直接转换为渲染后的效果。这样作者就可以很方便地一边编辑一边调整最终成稿。</p><h3 id="PicGo是什么"><a href="#PicGo是什么" class="headerlink" title="PicGo是什么"></a>PicGo是什么</h3><p>简单来说，PicGo是一个用于快速上传图片至图床并获取图片URL链接地工具。一直以来在md文件中插入并管理图片都是一个非常麻烦的工作，你需要将你需要使用的图片放在本地或图床上，并在md文章中引用这些地址来实现图片地展示。但现在Typora中置入了PicGo Core的工具让你可以以可视化的方式简单方便地插入图片在你的博文中。</p><h3 id="具体如何配置"><a href="#具体如何配置" class="headerlink" title="具体如何配置"></a>具体如何配置</h3><p>虽然PicGo支持的图床相当多，但大部分图床都有各种各样的限制或收费。而我个人选择的则是GitHub作为我的图床，因为在建站时创建的远程仓库刚好可以直接拿来用作图床，除了文章内使用的图片，其他包括top_img或封面等所有在都可以很方便地上传至这些</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/">博客维护</category>
      
      
      <category domain="http://raylei.space/tags/Blog/">Blog</category>
      
      <category domain="http://raylei.space/tags/GitHub/">GitHub</category>
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      <category domain="http://raylei.space/tags/Typora/">Typora</category>
      
      <category domain="http://raylei.space/tags/PicGo/">PicGo</category>
      
      
      <comments>http://raylei.space/2022/02/12/2-typora_picgo_config/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[博客维护]基于Hexo框架搭建个人网站的实现记录</title>
      <link>http://raylei.space/2022/02/10/1-blog_setup_notes/</link>
      <guid>http://raylei.space/2022/02/10/1-blog_setup_notes/</guid>
      <pubDate>Thu, 10 Feb 2022 14:50:59 GMT</pubDate>
      
      <description>本文介绍了我跟随枫叶的详细教程成功搭建本网站的过程中的一些心得以及需要注意的点。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>从很久以前就想搭一个自己的网站，分享并且记录自己的一些日常工作和学习的过程和成果，此篇作为我的第一篇文章，就先分享一下我跟随<a href="https://zhuanlan.zhihu.com/p/102592286?tdsourcetag=s_pctim_aiomsg" title="从零开始搭建个人博客（超详细)">枫叶</a>的详细教功搭建本博客网站的一些心得体会。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本网站的搭建过程与枫叶教程中的基本一致，下面我就分篇讲一讲我作为一个“网络”小白在读教程的过程中遇到的一些问题，以及查询资料后我的理解。</p><h2 id="关于第二篇Git安装的问题"><a href="#关于第二篇Git安装的问题" class="headerlink" title="关于第二篇Git安装的问题"></a>关于第二篇Git安装的问题</h2><p>Git本身是一个免费开源的分布式版本控制系统(Distributed version control system), Git的主要作用是我们通过此版本控制系统提交文件至仓库，由该系统为提交的文件打上版本号。需要记录的几个定义，需要强调的是以下基于我查到的资料和我自己的理解，有理解不对的地方还请大神指正：</p><ul><li>本地仓库与远程仓库：分别指建立在本地和互联网服务器内的文件夹</li><li>分布式与集中式版本控制系统：分布式系统（如Git）同时具有本地及远程仓库，提交文件时先提交至本地仓库，有网络时再提交至服务器上的远程仓库。集中式系统（如SVN）只配有远程仓库，提交文件时直接提交到远程仓库。</li><li>在此步骤中，GitHub既是远程仓库，是一个网络文件夹。我们主要使用Git作为同步本地仓库和远程仓库的工具。</li></ul><h2 id="关于第三篇绑定GitHub并提交文件"><a href="#关于第三篇绑定GitHub并提交文件" class="headerlink" title="关于第三篇绑定GitHub并提交文件"></a>关于第三篇绑定GitHub并提交文件</h2><p>跟随步骤进行时有两点需要注意：</p><h3 id="Git的username和email的配置"><a href="#Git的username和email的配置" class="headerlink" title="Git的username和email的配置"></a>Git的username和email的配置</h3><p>首次提交文件时需要向远程仓库声明本机器的名字和Email地址，即使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;yourusername&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;youremailaddress@xxx.com&quot;</span></span><br></pre></td></tr></table></figure><p>根据<a href="https://careerkarma.com/blog/git-config/" title="How to Set Up Git Using git config">这篇文章</a>的描述，这个username可以是任何你想要附在你的提交文件上的一个“标记”，它不需要和你的版本控制用户名（例如你的GitHub用户名）一致。之所以要在首次提交之前输入这个信息就是为了给你的提交打上“标记”, 一旦你的提交被创建，它的“著作权”就已经和你填写的这两条信息绑定，不能再被更改。</p><p>此处以我自己的理解是该名字和Email地址其实对于我们真正要做的事情并没有实质作用或影响，只不过是向远程仓库提交了一个象征这个本地仓库的一个符号，提交后即可以使用下方命令查看配置是否成功上传。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config -l</span><br></pre></td></tr></table></figure><p>之所以强调要查看这个配置的原因是因为在枫叶的教程中给出的代码有<strong>少许错误</strong>：</p><p><img src="https://raw.githubusercontent.com/0Rayhlei0/Pics/main/post_img/image-20220210235741955.png" alt="教程中的代码没有带空格"></p><p>没有这个空格不会有任何报错，同时也不会有任何效果，我当时因为不知道这个小错误，还以为username与email都成功设置了，导致Git一直无法成功commit而找不到原因，需要注意。</p><h3 id="从Master换成Main的掩耳盗铃"><a href="#从Master换成Main的掩耳盗铃" class="headerlink" title="从Master换成Main的掩耳盗铃"></a>从Master换成Main的掩耳盗铃</h3><p>枫叶教程中多次提及的GitHub的默认分支Master，<a href="https://blog.csdn.net/j3T9Z7H/article/details/108898310" title="今天开始，GitHub将启用main作为默认分支名，master将成为历史！">查询</a>后发现原来这个默认的Master分支已经在2020年10月1日起被GitHub改成了Main，其原因竟是因为要避讳可能引起人们联想到奴隶制的词汇，为了这种自欺欺人的原因导致多少人的麻烦。</p><h4 id="push文件时的命令"><a href="#push文件时的命令" class="headerlink" title="push文件时的命令"></a>push文件时的命令</h4><p>回到正题，因为分支名的改动，文件commit至本地仓库后应使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin main</span><br></pre></td></tr></table></figure><p>将本地仓库提交至远程仓库，这其中origin是远程主机(即GitHub)的名字,而main则是我们仓库的默认分支名。</p><h4 id="初始化本地仓库时要做的修改"><a href="#初始化本地仓库时要做的修改" class="headerlink" title="初始化本地仓库时要做的修改"></a>初始化本地仓库时要做的修改</h4><p>在实际操作中我还发现了这个改动导致git隐藏的一个地雷，那就是当我们用枫叶第三篇博客中提到的第二种git方法提交文件时，使用<code>git init</code>将不会初始化到我们想要的main分支，而是默认创建了master分支。这将直接导致我们之后使用<code>git push origin main</code>推至远程仓库时会报错，因为我们的本地仓库根本就不是main。</p><p><img src="https://raw.githubusercontent.com/0Rayhlei0/Pics/main/post_img/image-20220213115508276.png" alt="image-20220213115508276"></p><p>这时我们要将这个本地仓库分支名改成我们想要推至的远程仓库，并且最好顺道把<code>git init</code>的默认分支也改成main，毕竟GitHub的默认分支都已经改成main了。然后你就可以继续按照教程快乐上传各种文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -M main <span class="comment">#这个命令可以将你当前所在的本地仓库分支名改成-M后面这个参数&quot;main&quot;</span></span><br><span class="line">$ git config --global init.defaultBranch main <span class="comment">#将默认分支名改成main，可以用git config -l查看是否更改成功</span></span><br></pre></td></tr></table></figure><h3 id="为什么要提交到GitHub"><a href="#为什么要提交到GitHub" class="headerlink" title="为什么要提交到GitHub?"></a>为什么要提交到GitHub?</h3><p>我们之所以要将文件提交至GitHub的远程仓库其实是因为其提供的一项服务<a href="https://docs.github.com/en/pages" title="GitHub Pages Documentation">GitHub Pages</a>， 这项服务使用户可以创建和托管其自己的个人网站，每个GitHub账号只允许创建一个网站，这也是我们要用创建名称为<code>“用户名.github.io”</code>的仓库这样的方式来启用这项服务的原因。</p><h2 id="关于第五篇安装node-js和Hexo"><a href="#关于第五篇安装node-js和Hexo" class="headerlink" title="关于第五篇安装node.js和Hexo"></a>关于第五篇安装node.js和Hexo</h2><p>node.js简单来说就是JavaScript的一种运行环境，而npm则是node.js的包管理器 (package manager)，使用npm可以自动根据各个需要模块的依赖关系快速下载安装需要的所有依赖的包并管理，本篇中安装node.js的直观原因就是为了能在命令行中使用npm。</p><h3 id="设置文件夹权限"><a href="#设置文件夹权限" class="headerlink" title="设置文件夹权限"></a>设置文件夹权限</h3><p>本篇中需要注意的一点是，设置npm的路径和环境变量时在nodejs文件夹中创建的两个node_cache和node_global文件夹需要在各自的属性中给与用户所有权限，否则会导致npm报错。</p><p><img src="https://raw.githubusercontent.com/0Rayhlei0/Pics/main/post_img/image-20220211002517309.png" alt="给予用户完全控制权限"></p><h3 id="Hexo是什么？"><a href="#Hexo是什么？" class="headerlink" title="Hexo是什么？"></a>Hexo是什么？</h3><p>根据Hexo的<a href="https://hexo.io/docs/" title="Hexo Documentation">官方文档</a>，Node.js与Git都是使用Hexo的必要条件，而Hexo本身则是一个免费的博客框架，换句话说既是已经写好的“网站积木”，有了Hexo我们就不需要完全重新设计搭建网站，被古老的html语言折磨，而可以用已有的积木搭出我们想要的网站的样子，主流的博客框架除了Hexo还有与GitHub Pages绑定的Jekyll，尽管看到不少网友鼓吹Jekyll的便捷，但我看着网上大部分由Hexo搭建的博客网站想想大概人类的本质就是口嫌体直罢。</p><p>关于Hexo相关的命令有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder] <span class="comment"># 该命令在提供的文件夹下初始化一个网站，如果没有提供文件夹路径则在当前路径初始化。完成导入hexo-starter到目标文件夹并安装依赖包。</span></span><br><span class="line">$ hexo g <span class="comment"># 等同于 hexo generate，该命令将文件夹中的资源文件生成部署网站用的静态文件，这也是我们刚刚提到的Hexo最重要的作用，将积木搭成城堡的一步。</span></span><br><span class="line">$ hexo s <span class="comment"># 等同于hexo server，启动本地服务器。该命令用于预览已经做出的更改，但不会推送至远程仓库部署，使用该命令不需要hexo g即可默认从http://localhost:4000/本地预览网站的样子。</span></span><br><span class="line">$ hexo clean <span class="comment"># 该命令用于清除缓存文件db.json和已经生成的静态文件Public, hexo g之前最好先运行此命令以免造成generate的文件出现难以预估的问题。</span></span><br><span class="line">$ hexo d <span class="comment">#等同于hexo deploy，使用此命令将目前文件夹中的静态文件部署到设定的仓库（网站）。</span></span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>感谢枫叶大佬的详细介绍才使得我一个完全没有接触过类似东西的人得以在几天内忙里偷闲搭起了这样一个网站，像是有了一个小小的自己的空间，非常感激。即使第六篇之后，也就是网站的主题选择我没有像枫叶大佬一样选择Next主题，而是用了目前看起来更新更符合我审美的<a href="https://butterfly.js.org/" title="Butterfly Documentation">Butterfly</a>，我也依然在配置Hexo的主题文件等等问题上很大程度上参考了大部分第八篇的内容。</p><p>另外必须给大家推荐我现在使用的这个主题, 这是最符合我审美并且自由度相当高的一款主题，网站上有相当详细的文档，大家配置主题的时候跟着文档走就可以完成大部分的网站配置了。</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/">博客维护</category>
      
      
      <category domain="http://raylei.space/tags/Blog/">Blog</category>
      
      <category domain="http://raylei.space/tags/Hexo/">Hexo</category>
      
      <category domain="http://raylei.space/tags/GitHub/">GitHub</category>
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      
      <comments>http://raylei.space/2022/02/10/1-blog_setup_notes/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
