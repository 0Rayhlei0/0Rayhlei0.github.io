<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HideOnRubbish | RayHLei</title>
    <link>http://raylei.space/</link>
    
    <atom:link href="http://raylei.space/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个给保险公司做数据分析的人</description>
    <pubDate>Fri, 01 Apr 2022 11:02:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[金融分析] CFA一级考试学习计划</title>
      <link>http://raylei.space/2022/03/31/12-CFA-level-1-overview/</link>
      <guid>http://raylei.space/2022/03/31/12-CFA-level-1-overview/</guid>
      <pubDate>Thu, 31 Mar 2022 09:37:52 GMT</pubDate>
      
      <description>[第12篇] 本篇开始为CFA考试做准备，制定学习计划。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>虽然我自己认为CFA考试对我的职业发展不一定有帮助，但考虑到作为数据&quot;科学家&quot;以后可能从事的行业并不单一，加之我各种金融相关的学术背景，还是准备几个认可度较高的证考一考相比其其他证性价比会更高一些，也开拓一下今后的发展空间。今天开始准备CFA一级的考试，先在这里做个计划，首先定下目标是通过2022年11月份的CFA一级考试，同时将日语与英语的学习时间以每周4:2:1的比例分配。</p><h1>正文</h1><p>CFA考试对我来说算是比较陌生的，虽然听考过的同学说一级基本都是大学学过的内容，但具体这是什么东西，要考哪些内容以及考试的形式等等都需要先了解一下。而从现在3月31日至11月之间还有7个月的时间，相比起盲目复习，还是有必要在开始之前规划一下每段时间的学习计划。</p><h2 id="成为持证人">成为持证人</h2><p>要成为一名认证的CFA持证人需要4步：</p><ol><li><code>通过CFA考试：</code>CFA计划由三级课程组成，每一级拥有各自的考试，通过三级考试是成为持证人的必要条件。</li><li><code>获得认证的工作经验：</code>工作经验可以在加入CFA计划前后的任何阶段完成，但工作经验必须与投资决策过程与投资相关。</li><li><code>提交介绍信：</code>要成为持证人还需要提供2-3封专业人员的介绍信，介绍你的工作经验和专业性。</li><li><code>提交申请：</code>最后要提交申请成为CFA协会成员，经核准后可以成为CFA持证人。</li></ol><h2 id="CFA考试介绍">CFA考试介绍</h2><p>本节的内容我都引自<a href="https://www.cfainstitute.org/" title="CFA Institute">CFA官网</a>，先弄清楚关于CFA考试的一些基本概念。CFA全称<code>特许金融分析师(Charted Financial Analyst)</code>，CFA协会是一家全球性投资专业人士会员组织，其为投资业发表研究成果，开展职业发展项目和制定自愿的、以道德为基础的专业和投资表现报告标准。其组织在全球160多个国家和地区拥有超过165000名CFA持证人。</p><h3 id="考试级别">考试级别</h3><p>CFA考试一共分为三级，分别为levelⅠ，levelⅡ和levelⅢ，他们的对比如下：</p><table><thead><tr><th></th><th>levelⅠ</th><th>levelⅡ</th><th>levelⅢ</th></tr></thead><tbody><tr><td>必要条件</td><td>CFA登记入门要求</td><td>通过levelⅠ考试</td><td>通过levelⅡ考试</td></tr><tr><td>问题形式</td><td>多项选择题</td><td>情景支持的多项选择题</td><td>情景支持的论文题和多项选择题</td></tr><tr><td>结果通知时间</td><td>考试结束60天内</td><td>考试结束60天内</td><td>考试结束90天内</td></tr><tr><td>10年平均通过率</td><td>42%</td><td>45%</td><td>54%</td></tr></tbody></table><h3 id="考试形式">考试形式</h3><p>从2021年起CFA考试形式从笔试改为机考。选定考试月份后，可以根据自己需求选择考试时间和地点，选定后如果要更改时间需要多花250美元费用。CFA一级考试总题量180个，考试时间长度共4.5小时：</p><ul><li>30分钟宣誓，指导和调研</li><li>135分钟完成第一部分</li><li>中途休息30分钟</li><li>135分钟完成第二部分</li></ul><p>考试可以允许使用计算器，但计算器只能是Texas Instruments BA II Plus 或 Hewlett Packard 12C。同一个参试者两次考试中间间隔时间不能短于6个月，也即不论是未通过考试重考或是通过考试参加下级考试都必须预约6个月以后的考试。</p><h3 id="考试内容">考试内容</h3><p>考试一共涵盖十个科目，每级考试中各个科目内容的比重不同，首先介绍一些这些科目的大致内容：</p><h4 id="道德和职业标准-Ethical-and-Professional-Standards">道德和职业标准(Ethical and Professional Standards)</h4><p>这科重点内容包括道德，道德行为相关的挑战以及投资行业的职业道德标准。</p><h4 id="量化方法-Quantitative-Methods">量化方法(Quantitative Methods)</h4><p>这科内容主要包括金融分析和投资决策中使用的量化方法与技术。将投资回报分布的重要特征包括集中趋势，位置，和分散度等重要的数据属性以描述性的统计数字方式展示。内容还包括概率论及其在投资决策中的风险量化中的应用。</p><h4 id="经济学-Economics">经济学(Economics)</h4><p>在这部分中，我们首先会介绍单一消费者和公司供需关系的基本概念分析。我们还会涵盖公司运营的不同市场结构，宏观经济学原理和概念，包括总产量，收入水平衡量，总供需分析，以及经济增长因素分析等。最后还有一些商业周期和他们对经济活动的影响等。</p><h4 id="财务报表分析-Financial-Statement-Analysis">财务报表分析(Financial Statement Analysis)</h4><p>该科目在2020年叫<code>财务报告和分析</code>，在本部分我们提供财务报告过程和财务披露标准的解释，其中主要强调基本的财务报表知识以及一些不同的会计方法会对财务报表产生的影响及分析方法。我们主要考察主要财务报表并提供财务报表分析的基本方法。</p><h4 id="公司发行人-Corporate-Issuers">公司发行人(Corporate Issuers)</h4><p>该科目在2020年叫<code>公司金融</code>，这部分中我们主要介绍公司治理和投资金融决策等。我们会介绍分析和理解公司治理和股东管理的主要知识，并且介绍环境和社会观点对投资越来越大的冲击。我们还会介绍公司使用对资产负债结构的调整来实现他们的短期运营需要。</p><h4 id="股权投资-Equity-Investments">股权投资(Equity Investments)</h4><p>我们在这部分主要涵盖了股权投资，证券市场，和指数交易等等内容，并且介绍如何分析行业，公司，股票证券以及基本的股权估值模型。投资全球性的资产对于长期投资回报与多样化目标非常重要。</p><h4 id="固定收益-Fixed-Income">固定收益(Fixed Income)</h4><p>在这部分我们主要介绍固定收益证券产品和他们的市场，回报衡量，风险因子，估值方式和驱动因子等等。我们还会介绍回报和固收证券的计算方法，资产的证券化，债券回报和风险的基本知识以及信用风险的基本原理和分析。</p><h4 id="衍生品-Derivatives">衍生品(Derivatives)</h4><p>在这科中我们主要介绍一些基础金融衍生品以及衍生品市场的框架知识，然后我们会介绍诸如期货，期权，远期，互换交易和或有债权等衍生品的重要特征以及定价原理等等。最后我们会研究金融衍生品使用无风险套利模型定价的方法。</p><h4 id="另类投资-Alternative-Investments">另类投资(Alternative Investments)</h4><p>这部分内容介绍包括对冲基金，私人资产，房地产，货物和基础设施等另类投资。我们主要讨论如何使用另类投资做投资多样化并实现更高的投资回报。</p><h4 id="投资组合管理及理财-Portfolio-Management-and-Wealth-Planning">投资组合管理及理财(Portfolio Management and Wealth Planning)</h4><p>在此科目中我们会他讨论投资组合和风险管理的基础知识，包括投资回报，风险指标，投资组合规划和搭建。我们主要考察个体和机构投资者在可用的投资解决方案中满足他们的需要。我们使用资本资产定价模型(CAPM)来优化组合风险。</p><p>看过各科目介绍后发现确实除了<code>道德标准</code>和<code>另类投资</code>两科以外，其他都是本科和一硕反复学反复考的内容，同学说裸考通过我也不是很奇怪了。这几科内容在三级考试中的占比各有不同：</p><table><thead><tr><th></th><th>levelⅠ</th><th>levelⅡ</th><th>levelⅢ</th></tr></thead><tbody><tr><td>道德和职业标准</td><td>15-20</td><td>10-15</td><td>10-15</td></tr><tr><td>量化方法</td><td>8-12</td><td>5-10</td><td>0</td></tr><tr><td>经济学</td><td>8-12</td><td>5-10</td><td>5-10</td></tr><tr><td>财务报表分析</td><td>13-17</td><td>10-15</td><td>0</td></tr><tr><td>公司发行人</td><td>8-12</td><td>5-10</td><td>0</td></tr><tr><td>股权投资</td><td>10-12</td><td>10-15</td><td>10-15</td></tr><tr><td>固定收益</td><td>10-12</td><td>10-15</td><td>15-20</td></tr><tr><td>衍生品</td><td>5-8</td><td>5-10</td><td>5-10</td></tr><tr><td>另类投资</td><td>5-8</td><td>5-10</td><td>5-10</td></tr><tr><td>投资组合管理及理财</td><td>5-8</td><td>10-15</td><td>35-40</td></tr></tbody></table><p>能够看出来考试不同阶段对考生不同方面的能力要求是有变化的，前两级对各个科目的能力都有考察，而级别越低其对基本知识和能力的考察越多，到第三级则侧重考研参试者的实战投资组合管理等能力。</p><h3 id="考试费用">考试费用</h3><p>第一次参加考试的人员需要缴纳450美元的注册费，在此之上2023年2月之前的考试，每次考试的考试费为1000美元，如果提前6个月预约考试可以得到300美元折扣，即700美元的早鸟考试费。从2023年2月的考试开始，注册费会调整为350美金，而早鸟考试费和标准考试费会分别上涨到900美元和1200美元。</p><h2 id="学习计划">学习计划</h2><p>参考网上各位大神的经验，我计划分两轮复习，第一轮从4月1日至7月31日，第二轮从8月1日至9月30日，剩下一个月时间主要做题目模考，查漏补缺。</p><p>关于第一轮复习时间安排，我计划先从自己以前学得不牢但分数占比较高的部分学起：</p><table><thead><tr><th>月份</th><th>主要学习科目</th></tr></thead><tbody><tr><td>4月</td><td>财务报表分析，量化方法</td></tr><tr><td>5月</td><td>公司发行人，经济学</td></tr><tr><td>6月</td><td>股权投资，固定收益，衍生品，另类投资</td></tr><tr><td>7月</td><td>投资组合管理及理财，道德和职业标准</td></tr></tbody></table><h1>最后</h1><p>CFA不是我唯一的学习目标，所以我不会拿出所有的精力学它，我每周安排四天，每天1-2小时的学习时间，每周的其他3天我将安排日语和英语的学习。上面的这份学习计划，我会根据实际情况调整。</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E9%87%91%E8%9E%8D%E5%88%86%E6%9E%90/">金融分析</category>
      
      
      <category domain="http://raylei.space/tags/CFA%E4%B8%80%E7%BA%A7/">CFA一级</category>
      
      
      <comments>http://raylei.space/2022/03/31/12-CFA-level-1-overview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MS Office]使用 MS Access 开发文档管理查询工具</title>
      <link>http://raylei.space/2022/03/27/11-MSAccess-documentation-tool/</link>
      <guid>http://raylei.space/2022/03/27/11-MSAccess-documentation-tool/</guid>
      <pubDate>Sun, 27 Mar 2022 13:38:17 GMT</pubDate>
      
      <description>[第11篇] 本篇介绍了我使用MS Access为公司文档管理和查询开发的小工具，使用者可以使用这个工具非常方便地查询所需文档。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>初次来到这家公司就发现公司的<code>文档记录</code>不太完备，很多<code>数据概念</code>和<code>数据库定义</code>要么模棱两可要么需要询问老员工，这乍看起来是个不影响干活的小事但实际上这不仅可能造成工作效率低下的结果，甚至可能导致<code>严重的问题</code>(类似于报告口径不一，数据结果错误导致决策错误或公司声誉受损等等)，因此这其实是一个<code>风险暴露</code>。我也因此决定至少给我们自己团队做一个<code>文档数据库</code>来设立一个可以参考标准口径，避免一些不必要的风险，同时加强同事日常工作和交接的效率与质量。</p><p>我虽然不是第一次接触VBA但其实这是我第一次接触<code>Access数据库</code>的应用开发，整个工具开发花了我接近七八天的时间，学到的东西也不少。在这篇文章中我会首先介绍一下工具本身的功能，然后是我学习到的Access应用开发的一些基本知识，以及介绍我在实现一些功能时用到的一些VBA代码。</p><h1>正文</h1><p>本文会直接介绍<code>工具的功能</code>及<code>开发中学习到的知识</code>，以及一些功能的<code>代码实现方法</code>。关于Access中各对象基本定义及功能的介绍可以去我的另一篇文章<a href="http://raylei.space/2022/02/25/6-MSAccess_database_split/">分割 MS Access 数据库为前端和后端</a>看看。</p><h2 id="工具结构">工具结构</h2><p>目前这个文档工具有3个主要的文档数据库：</p><ol><li><code>Key Measurements SQL：</code>记录了日常业务中可能涉及的主要术语与指标的定义及其SQL样例。</li><li><code>Database Documentation：</code>记录了团队经常使用的数据库表及相应各个字段的详细信息。</li><li><code>Marco Polo Dashboards：</code>记录了公司Tableau平台上的Dashboards的网址, 详细信息及使用方法。</li></ol><p>其中前两个文档只需要实现名字的查询即可，而第三个<code>Tableau Dashboard</code>我则希望可以实现信息关键词的查询，因为团队中有些同事的数据查询需求其实已经在<code>Tableau</code>上有查询模板，我希望增加这个功能可以使用户通过他们需求的关键字可以查询到能帮助他们的<code>Dashboard</code>。</p><p>另外我为工具设置了<code>两个主要入口</code>，一个供<code>数据维护者</code>使用，使用<code>分割窗体(Split form)</code>，用户可以在界面中进行数据的<code>增删改查</code>，包括对工具本身的版本记录进行修改。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/show_maintenance.gif" alt="维护端界面演示"></p><p>另一个则是供<code>其他同事</code>使用，界面更为简洁，用户从下拉菜单中选择要查询的数据，并且可以通过不同的方式筛选出要<code>查询</code>的数据，但没有增删改已有数据的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/show_documentation.gif" alt="用户端界面演示"></p><h2 id="Access表单工具开发基础知识">Access表单工具开发基础知识</h2><p>Access的基本概念和定义我已经在第6篇博文中介绍过，在本节中我会注重介绍一些开发表单工具可能需要知道的基础知识，有了这些基本知识，稍加摸索尝试就可以很快上道了。</p><h3 id="四种视图">四种视图</h3><p>要做Access的<code>表单(Form)工具</code>开发首先要搞清楚的是四种不同的<code>视图(View)</code>各自的作用及用法。在表单下通过<code>开始(Home)选项卡</code>中<code>视图(View)组</code>中的视图切换视图，四种不同的视图的用法和用处各有不同：</p><ul><li><code>窗体视图(Form View)：</code>该视图下表单即为用户正常使用的状态，没有开发者选项，开发者可以在该视图下测试表单是否如预期运行。</li><li><code>数据表视图(Datasheet View)：</code>该视图下表单主要显示该表单的数据信息，呈现方式与表(Table)中相同，开发者可以用该视图检视表单的数据信息。</li><li><code>布局视图(Layout View)：</code>该视图下表单可以呈现窗体视图外观的同时不触发控件事件，在该视图下开发者依然可以通过属性栏配置表单。通常使用这个视图调整一些与表单外观有关的功能会得到比较直观的反馈。</li><li><code>设计视图(Design View)：</code>该视图下的表单会呈现出更多更详细的信息，例如表单的高度宽度尺，格线，页眉和页脚，该视图下可以调整的参数会多于布局视图但修改可能不会太直观。</li></ul><h3 id="属性表">属性表</h3><p>Access中对表单的各方面配置都可以在<code>属性表(Property Sheet)</code>中完成，在<code>布局或设计视图</code>下右键单击表单，选择<code>属性(Property)</code>便会弹出当前控件的可调整属性，其中拥有自己属性的对象除了各种<code>控件(Control)</code>以外，还有<code>表单(Form)</code>，<code>页眉(Header)</code>，<code>页脚(Footer)</code>和<code>主体(Detail)</code>。</p><p>属性表中会显示当前选择的对象的类型（<code>控件类型或窗体(Form)或节(Section)</code>）及名称，而每个对象的配置参数又分为4个<code>选项卡</code>：<br><code>格式(Format)：</code>在该选项卡中可以调整对象的外观参数以及一些控件的显示。</p><p><code>数据(Data)：</code>该选项卡内容涉及数据显示相关设置，如数据源，默认值，数据验证或其他数据相关的配置。</p><p><code>事件(Event)：</code>该选项卡主要涉及各种触发事件，开发者可以在不同的事件中加入宏或VBA代码来实现各种功能。</p><p><code>其他(Other)：</code>基本上其他类找不到的参数设置就在这里找。</p><h3 id="宏和VBA代码">宏和VBA代码</h3><p>Access中有<code>宏(Macro)</code>和<code>VBA代码(Code)</code>的<code>生成器(Builder)</code>，在控件的事件选项卡中点击<code>...</code>按键就可以进入生成器选择窗口，而宏和代码都可以一定程度上完成对某个事件的编程，他们的区别在于功能性和复杂度上。<code>宏</code>使用已经定义好的动作模块来设定事件动作，<code>简单快捷但自由度受限</code>，而<code>VBA代码</code>则需要开发者更高的代码能力，但能够实现更加<code>复杂的事件任务</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/macro.jpg" alt="宏界面"></p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/vba_code.jpg" alt="vba界面"></p><p>在我们的工具中一些功能的实现结合了宏和VBA代码两种方式的使用。</p><h2 id="部分功能的代码实现">部分功能的代码实现</h2><p>我们的工具中每一个<code>按钮控件(Button Control)</code>都会涉及一个或多个代码块，但有些功能确实很简单我就不详细说了，这里我挑几个我觉得需要注意或者花了我一些功夫才写好的功能，那就由简及难一一介绍一下吧。</p><h3 id="控制分割窗体的宽度">控制分割窗体的宽度</h3><p>当我们设置表单的格式为<code>分割窗体(Split form)</code>时，我们无论在视图中如何调节它的宽度它在被打开时都会自动占满屏幕，这会减弱我们做出来的工具在不同设备上呈现的一致性，让我非常不爽。查了一下之后发现原来分割窗口的宽度可以用<code>MoveSize方式</code>调整。根据微软的官方文档，<code>MoveSize</code>的使用方法如下，其中数值的单位为<code>twip</code>：</p><blockquote><p><em>expression</em>.<strong>MoveSize</strong> (<em>Right</em>, <em>Down</em>, <em>Width</em>, <em>Height</em>)</p></blockquote><p>那么我们只需要在表单的<code>加载(On Load)</code>事件中加上这个表达就可以实现打开表单时自动调整宽度。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Form_Load()</span><br><span class="line">DoCmd.MoveSize , , <span class="number">7</span> * <span class="number">1600</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="设置打开Zoombox按钮">设置打开Zoombox按钮</h3><p>我的文档工具中因为涉及较长文本的输入，而且会有比较多的主动换行，因此直接在窗口文本框输入可能不太方便编辑，一般情况下用户可以在文本框中按<code>Shift+F2</code>的快捷键组合来打开当前文本框的<code>Zoombox</code>，用户可以在这个更大的窗口中编辑文字，查询时内容展示也更加清晰明了。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/zoombox.gif" alt="Zoombox按钮演示"></p><p>但显然快捷键组合对于普通用户来说有些过于繁琐了，因此我加了一个按钮，可以使用户在选择文本框后点击该按钮来打开这个文本框的<code>Zoombox</code>，只是在代码实现上稍微一些小小的注意事项，因为按钮本身是不具备<code>启动Zoombox</code>这个属性的，因此我们要将<code>focus</code>设定在点击按钮前的一个控件上，我的代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> Text_zoom_Click()</span><br><span class="line">    <span class="keyword">Const</span> NOT_ZOOMABLE = <span class="number">2046</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">    Screen.PreviousControl.SetFocus</span><br><span class="line">    RunCommand acCmdZoomBox</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> Err.Number</span><br><span class="line">        <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">&#x27; no error</span></span><br><span class="line">        <span class="keyword">Case</span> NOT_ZOOMABLE</span><br><span class="line">        MsgBox (<span class="string">&quot;Please select a TextBox before zoom in!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        <span class="comment">&#x27;unanticipated error - inform user</span></span><br><span class="line">        MsgBox Err.Description, vbExclamation, <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>简单来说就是点击按钮后对点击前的控件执行<code>acCmdZoomBox</code>即<code>打开Zoombox</code>的命令，而如果在按按钮前点击的控件不具备这个功能，程序会返回<code>错误代码2046</code>，如果捕捉到这个错误代码就弹出<code>“请先选择一个要放大的文本框”</code>提示。</p><h3 id="查找筛选符合条件的数据">查找筛选符合条件的数据</h3><p>为了方便用户<code>查改数据</code>，我需要给表单加入<code>搜索</code>的功能，比较方便的方法就是使用表单中的<code>筛选功能</code>，通过<code>关键字搭配通配符</code>在不同的<code>字段</code>筛选便可以找出符合条件的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/filterOn.gif" alt="关键字筛选演示"></p><p>而对于工具的数据维护界面我使用的是<code>分割表单</code>，因此只要将需要的数据筛选出来，用户就可以在分割窗口中选择自己想要编辑的记录来操作。代码块如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> find_record_Click()</span><br><span class="line">    <span class="keyword">Dim</span> category_search_term <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> dashboard_search_term <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> category_null <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> dashboard_null <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; for each null input, filter for every entry by sending * or IS NULL</span></span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">    <span class="keyword">If</span> IsNull(category_search) <span class="keyword">Then</span></span><br><span class="line">        category_search_term = <span class="string">&quot;&quot;</span></span><br><span class="line">        category_null = <span class="string">&quot; OR [MP Category] IS NULL&quot;</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        category_search_term = category_search.Value</span><br><span class="line">        category_null = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">If</span> IsNull(dashboard_search) <span class="keyword">Then</span></span><br><span class="line">        dashboard_search_term = <span class="string">&quot;&quot;</span></span><br><span class="line">        dashboard_null = <span class="string">&quot; OR [MP Dashboard] IS NULL&quot;</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        dashboard_search_term = dashboard_search.Value</span><br><span class="line">        dashboard_null = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Me</span>.Filter = <span class="string">&quot;([MP Category] LIKE &#x27;*&quot;</span> &amp; category_search_term &amp; <span class="string">&quot;*&#x27; &quot;</span> &amp; category_null &amp; <span class="string">&quot;) AND &quot;</span> _</span><br><span class="line">    &amp; <span class="string">&quot;([MP Dashboard] LIKE &#x27;*&quot;</span> &amp; dashboard_search_term &amp; <span class="string">&quot;*&#x27; &quot;</span> &amp; dashboard_null &amp; <span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">Me</span>.FilterOn = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> Err.Number</span><br><span class="line">        <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">&#x27; no error</span></span><br><span class="line">        <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        <span class="comment">&#x27;unanticipated error - inform user</span></span><br><span class="line">        MsgBox Err.Description, vbExclamation, <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>需要注意的一点是，因为<code>筛选</code>需要使用表单上的<code>文本框</code>输入内容，因此在直接使用<code>TextBox.Value</code>获取内容时可能会出现<code>空值报错</code>，而同时如果仅仅只将筛选值以<code>&quot;&quot;</code>形式传给筛选条件的话，筛选会以<code>&quot;Field LIKE '**'&quot;</code>的条件筛选，这时筛选出的内容会<code>不包括内容为空的记录</code>，这在用户端可能无所谓，毕竟如果指针列的字段都为空很可能说明这条记录本身就没有完成，所以筛选出来也没有意义。但在维护端如果筛选不出字段为空的记录的话就会导致未完成的记录再也不能被筛选出来。</p><p>因此我在筛选器的语句中除了加入要筛选的内容外，还多了一重判断<code>“若输入为空，则在筛选条件中加入语句OR Field IS NULL”</code>以此筛选出该字段为空的记录。筛选器设置好后再用<code>Me.FilterOn = True</code>的语句将该设置应用在表单上筛选才会生效。这样就完成了记录筛选查找功能。</p><h3 id="通过关键字限制组合框内容">通过关键字限制组合框内容</h3><p>在维护端要筛选出符合特定条件的记录可以直接筛选后在分割窗口中选择想要操作的数据，但在客户端我不希望使用分割窗体这么<code>&quot;复杂&quot;</code>的功能，我希望给用户更加简单易懂的操作界面。因此出现了我在这个工具开发中想出来的最有意思的一段代码和功能。那就是通过关键字搜索来限制<code>组合框(ComboBox)</code>中的显示内容，并且通过组合框的中值的选择来定位记录。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/Combobox.gif" alt="组合框选择记录演示"></p><p>最开始实现这个功能我是希望可以将在上一节的筛选后的<code>记录集(RecordSet)</code>填入组合框的<code>行来源(Row Source)</code>，结果找了半天也没有发现<code>Access VBA</code>有这个操作方法。因此我想到的办法是在<code>查找记录</code>控件的筛选记录功能之上再加入一个获取筛选出的记录的索引并<code>新建一个表</code>，然后直接将<code>行来源</code>的引用关联到这个新建的表中不就可以实现实时控制组合框内容了吗？测试了一下真的挺好用。代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> search_dashboard_Click()</span><br><span class="line">    <span class="keyword">Dim</span> category_search_term <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> dashboard_search_term <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; for each null input, filter for every entry by sending *</span></span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">    <span class="keyword">If</span> IsNull(category_search) <span class="keyword">Then</span></span><br><span class="line">        category_search_term = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        category_search_term = category_search.Value</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">If</span> IsNull(dashboard_search) <span class="keyword">Then</span></span><br><span class="line">        dashboard_search_term = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        dashboard_search_term = dashboard_search.Value</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; Disconnect the combobox with the list table before deleting it.</span></span><br><span class="line">    <span class="keyword">If</span> <span class="built_in">Not</span> Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;&quot;</span> <span class="keyword">Then</span></span><br><span class="line">        Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; Delete the combobox list table if it exists</span></span><br><span class="line">    <span class="keyword">If</span> TableExists(<span class="string">&quot;combo_dashboard&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">        DoCmd.DeleteObject acTable, <span class="string">&quot;combo_dashboard&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27;make a table that store the index for this search and fill in the combobox row source with the result</span></span><br><span class="line">    strSQL = <span class="string">&quot;SELECT ID,[MP Category], [MP Dashboard] INTO combo_dashboard FROM Marco_Polo_Dashboards &quot;</span> &amp; _</span><br><span class="line">    <span class="string">&quot;WHERE [MP Category] LIKE &#x27;*&quot;</span> &amp; category_search_term &amp; <span class="string">&quot;*&#x27; &quot;</span> &amp; _</span><br><span class="line">    <span class="string">&quot;AND [MP Dashboard] LIKE &#x27;*&quot;</span> &amp; dashboard_search_term &amp; <span class="string">&quot;*&#x27; &quot;</span> &amp; _</span><br><span class="line">    <span class="string">&quot;ORDER BY [MP Category], [MP Dashboard];&quot;</span></span><br><span class="line">    CurrentDb.Execute strSQL</span><br><span class="line">    Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;SELECT ID,[MP Category], [MP Dashboard] FROM combo_dashboard ORDER BY [MP Category], [MP Dashboard]; &quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; filter the records based on search terms too</span></span><br><span class="line">    <span class="keyword">Me</span>.Filter = <span class="string">&quot;[MP Category] LIKE &#x27;*&quot;</span> &amp; category_search_term &amp; <span class="string">&quot;*&#x27; AND &quot;</span> _</span><br><span class="line">    &amp; <span class="string">&quot;[MP Dashboard] LIKE &#x27;*&quot;</span> &amp; dashboard_search_term &amp; <span class="string">&quot;*&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">Me</span>.FilterOn = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> Err.Number</span><br><span class="line">        <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">&#x27; no error</span></span><br><span class="line">        <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        <span class="comment">&#x27;unanticipated error - inform user</span></span><br><span class="line">        MsgBox Err.Description, vbExclamation, <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>这段代码中需要注意的点有几个：</p><ol><li>与维护端相比，用户端中我<code>去掉了筛选出空值记录</code>的功能，因为如果内容为空那么大概率这条记录还没有完成，不需要被用户查到。</li><li>关于<code>组合框</code>的<code>行来源</code>，我在表的<code>加载(On Load)</code>事件中加入了向<code>组合框行来源</code>中添加原表中所有引索的SQL语句，然后在<code>关闭(On close)</code>事件中加入了<code>清除行来源</code>并删除临时表的代码。这样可以保证为了查找引索而创建的临时表只在表单被打开的时候存在。</li><li>临时表中的<code>引索</code>和<code>记录集</code>中的记录被以同样的方式<code>排序</code>和<code>筛选</code>，以此保证筛选出来的记录与组合框中的待选记录在顺序和内容上都相同。</li><li>最后要实现组合框中的数据控制显示的记录有两种方式，一种比较简单的是通过<code>控件向导</code>添加<code>组合框</code>，其中有选择是否使用<code>组合框</code>控制记录显示。而第二种则是直接写<code>宏或代码</code>，因为其实控件向导实现这个功能的方法也就是在<code>“更新后(On Update)”</code>事件中添加一个<code>以当前组合框选择的记录ID</code>来查找记录的宏。</li></ol><h3 id="多关键字查询筛选记录">多关键字查询筛选记录</h3><p>完成了基本的查询功能之后，我还希望在<code>Tableau Dashboard</code>的文档工具中再加上一个<code>多关键字查询</code>的功能，我的设想是使用多个<code>AND条件</code>在<code>Description字段</code>中筛选用空格隔开的<code>每一个关键词</code>，这样如果用户想要找到一张可以看到<code>“CCBA YoY GWP”</code>的<code>Dashboard</code>，他只需要输入后就可以找到<code>Description</code>中同时出现了这几个关键词的记录，从而帮助用户快速定位他们需要的<code>Dashboard</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/keywordsearch.gif" alt="关键词搜索演示"></p><p>而代码的实现逻辑也非常简单，即使利用上节中使用的限制组合框筛选数据的原理，只不过对于提取新建引索表的SQL语句需要根据输入框中的关键词循环一下，其中第一个词前用<code>WHERE DESCRIPTION LIKE '*FIRSTWORD*'</code>的格式而后面其他词则用<code>AND</code>替代<code>WHERE</code>。具体代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> search_keywords_Click()</span><br><span class="line">    <span class="keyword">Dim</span> keywords_search_term <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> arrKeywords</span><br><span class="line">    <span class="keyword">Dim</span> varKeyword</span><br><span class="line">    <span class="keyword">Dim</span> strSQL <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> strFilter <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; for each null input, filter for every entry by sending *</span></span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">    <span class="comment">&#x27; if the key words are empty, select all records.</span></span><br><span class="line">    <span class="keyword">If</span> IsNull(keywords_search) <span class="keyword">Then</span></span><br><span class="line">        strSQL = <span class="string">&quot;SELECT ID,[MP Category], [MP Dashboard] INTO combo_dashboard FROM Marco_Polo_Dashboards &quot;</span> &amp; _</span><br><span class="line">            <span class="string">&quot;ORDER BY [MP Category], [MP Dashboard];&quot;</span></span><br><span class="line">        strFilter = <span class="string">&quot;Description LIKE &#x27;**&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">    <span class="comment">&#x27; looping the keywords input add &quot;AND&quot; criterias for each keyword.</span></span><br><span class="line">        strSQL = <span class="string">&quot;SELECT ID,[MP Category], [MP Dashboard] INTO combo_dashboard FROM Marco_Polo_Dashboards &quot;</span></span><br><span class="line">        arrKeywords = Split(keywords_search.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">Dim</span> loopOne <span class="keyword">As</span> <span class="type">Boolean</span></span><br><span class="line">        loopOne = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">For</span> <span class="keyword">Each</span> varKeyword <span class="keyword">In</span> arrKeywords</span><br><span class="line">            <span class="comment">&#x27; In the first loop, use WHERE and afterwards use AND to complete the SQL sentence.</span></span><br><span class="line">            <span class="keyword">If</span> <span class="built_in">Not</span> varKeyword = <span class="string">&quot;&quot;</span> <span class="built_in">And</span> loopOne <span class="keyword">Then</span></span><br><span class="line">                strSQL = strSQL &amp; <span class="string">&quot; WHERE Description LIKE &#x27;*&quot;</span> &amp; varKeyword &amp; <span class="string">&quot;*&#x27;&quot;</span></span><br><span class="line">                strFilter = <span class="string">&quot;Description LIKE &#x27;*&quot;</span> &amp; varKeyword &amp; <span class="string">&quot;*&#x27;&quot;</span></span><br><span class="line">                loopOne = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">ElseIf</span> <span class="built_in">Not</span> varKeyword = <span class="string">&quot;&quot;</span> <span class="built_in">And</span> <span class="built_in">Not</span> loopOne <span class="keyword">Then</span></span><br><span class="line">                strSQL = strSQL &amp; <span class="string">&quot; AND Description LIKE &#x27;*&quot;</span> &amp; varKeyword &amp; <span class="string">&quot;*&#x27;&quot;</span></span><br><span class="line">                strFilter = strFilter &amp; <span class="string">&quot; AND Description LIKE &#x27;*&quot;</span> &amp; varKeyword &amp; <span class="string">&quot;*&#x27;&quot;</span></span><br><span class="line">            <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">        <span class="comment">&#x27; sort the records in ascending order</span></span><br><span class="line">        strSQL = strSQL &amp; <span class="string">&quot; ORDER BY [MP Category], [MP Dashboard];&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; Disconnect the combobox with the list table before deleting it.</span></span><br><span class="line">    <span class="keyword">If</span> <span class="built_in">Not</span> Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;&quot;</span> <span class="keyword">Then</span></span><br><span class="line">        Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; Delete the combobox list table if it exists</span></span><br><span class="line">    <span class="keyword">If</span> TableExists(<span class="string">&quot;combo_dashboard&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">        DoCmd.DeleteObject acTable, <span class="string">&quot;combo_dashboard&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    CurrentDb.Execute strSQL</span><br><span class="line">    Combo_Dashboard_Lookup.RowSource = <span class="string">&quot;SELECT ID,[MP Category], [MP Dashboard] FROM combo_dashboard ORDER BY [MP Category], [MP Dashboard]; &quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; filter the records based on search terms too</span></span><br><span class="line">    <span class="keyword">Me</span>.Filter = strFilter</span><br><span class="line">    <span class="keyword">Me</span>.FilterOn = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> Err.Number</span><br><span class="line">        <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">&#x27; no error</span></span><br><span class="line">        <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        <span class="comment">&#x27;unanticipated error - inform user</span></span><br><span class="line">        MsgBox Err.Description, vbExclamation, <span class="string">&quot;Error&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>到这里基本上这个小工具中值得讲的东西就都讲完了。</p><h2 id="工具下载">工具下载</h2><p>我把一个只有测试内容的<code>副本</code>放在这里，有兴趣的可以打开看看每个部分功能具体是怎么实现的：</p><p>下载链接：<a href="/attachment/BancaDB_Documentation.accdb">点击这里</a></p><p>因为是第一次接触<code>Access</code>的VBA编程，我其实也发现了一些不好的编程习惯导致的不方便的情况，比如看网上大家的代码，有一个<code>约定俗成的规矩</code>是大家会在不同控件名称前加上这个控件的<code>类型简称</code>，比如<code>表A</code>命名为<code>tblA</code>,但我刚开始编的时候并没有意识到这个对读改代码有多重要，现在再改又比较麻烦了，各位先担待着，下次不会这样了。</p><h1>最后</h1><p>个人觉得通过这样一个小小的项目在一定程度上掌握了<code>数据库小应用的开发</code>是非常好的，以后面对某些难题又多了一个可能的解决方案，例如需要向客户定期收集资料时，可以做一个<code>Access前端</code>然后将表放在<code>SharePoint List</code>上，这样客户在前端收集到的资料就可以第一时间传送到云上的数据库中，这会比邮件沟通更大程度地增加<code>效率</code>和<code>用户体验</code>。</p><p>[第11篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/MS-Office/">MS Office</category>
      
      
      <category domain="http://raylei.space/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/">工作学习</category>
      
      <category domain="http://raylei.space/tags/Access/">Access</category>
      
      
      <comments>http://raylei.space/2022/03/27/11-MSAccess-documentation-tool/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[数据分析]常用数据库类型对比介绍</title>
      <link>http://raylei.space/2022/03/09/10-introduction-to-different-db/</link>
      <guid>http://raylei.space/2022/03/09/10-introduction-to-different-db/</guid>
      <pubDate>Wed, 09 Mar 2022 14:21:25 GMT</pubDate>
      
      <description>[第10篇] 本篇以小白视角介绍了各种常用数据库的类型及各自的特性</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>由于我本科并不是学的计算机，所以其实很多计算机基础的知识我都不太了解。最近在做一些数据库相关的工作的时候发现公司数据库系统使用的<code>IBM DB2</code>在操作和逻辑上似乎和之前用过的<code>Oracle</code>有一些差异，因此也发现我原来连这些不同数据库之间到底有些什么联系或者差异都不知道。所以今天想要系统地了解一下不同的数据库之间的关系和差异。</p><h1>正文</h1><p>接下来我会先从数据库的<code>基本特性</code>的概念开始介绍，因为正是因为这些特性很多不可以兼得，所以才衍生出各种各样不同的数据库类型。之后再看一看各个有名的数据库各自有什么特点，最后再讲讲公司用的<code>DB2数据库</code>在实际操作中与<code>Oracle</code>到底有什么细节上的区别和联系。</p><h2 id="影响数据库选择的因素">影响数据库选择的因素</h2><p>知乎的<a href="https://www.zhihu.com/question/414923789" title="[知乎] 数据库种类有哪些，各有什么特点？">民工哥</a>在他的回答中列出了几项影响数据库选择的因素，因为这些因素可能不能同时达成，或者达成有额外成本，因此不同的数据库可能为满足不同的生产需求对这些因素的实现程度和效率都有区别。他的总结是下面这些点：</p><ul><li><code>数据量：</code>是否海量数据，单表数据量太大会考验数据库的性能</li><li><code>数据结构：</code>结构化 (每条记录的结构都一样) 还是非结构化的 (不同记录的结构可以不一样)</li><li><code>是否宽表：</code>一条记录是 10 个域，还是成百上千个域</li><li><code>数据属性：</code>是基本数据 (比如用户信息)、业务数据 (比如用户行为)、辅助数据 (比如日志)、缓存数据</li><li><code>是否要求事务性：</code>一个事务由多个操作组成，必须全部成功或全部回滚，不允许部分成功</li><li><code>实时性：</code>对写延迟，或读延迟有没有要求，比如有的业务允许写延迟高但要求读延迟低</li><li><code>查询量：</code>比如有的业务要求查询大量记录的少数列，有的要求查询少数记录的所有列</li><li><code>排序要求：</code>比如有的业务是针对时间序列操作的</li><li><code>可靠性要求：</code>对数据丢失的容忍度</li><li><code>一致性要求：</code>是否要求读到的一定是最新写入的数据</li><li><code>对增删查改的要求：</code>有的业务要能快速的对单条数据做增删查改 (比如用户信息)，有的要求批量导入，有的不需要修改删除单条记录 (比如日志、用户行为)，有的要求检索少量数据 (比如日志)，有的要求快速读取大量数据 (比如展示报表)，有的要求大量读取并计算数据 (比如分析用户行为)</li><li><code>是否需要支持多表操作</code></li></ul><h2 id="关系型数据库和非关系型数据库-参考资料">关系型数据库和非关系型数据库(<a href="https://www.altexsoft.com/blog/business/comparing-database-management-systems-mysql-postgresql-mssql-server-mongodb-elasticsearch-and-others/" title="Comparing Database Management Systems: MySQL, PostgreSQL, MSSQL Server, MongoDB, Elasticsearch, and others">参考资料</a>)</h2><p><code>关系型数据库(Relational or SQL)</code>和<code>非关系型数据库(Non-relational or NoSQL)</code>是目前数据库系统的两个大类，虽然目前工作中有机会接触到的主要都是关系型数据库，但作为新兴的大数据工具以及与关系型数据库功能互补的非关系型数据库，<code>NoSQL</code>现在在数据库业界的势头也非常之猛，因此这里也简单了解一下。</p><h3 id="关系型数据库-Relational-DBMS">关系型数据库(Relational DBMS)</h3><p><code>关系型数据库</code>的特点顾名思义就是用<code>相互联系的表(tables)</code>来存储数据，<code>结构化查询语言(Structured Query Language, 也即SQL)</code>是这套数据库系统的核心，人们用这套语言来管理关系型数据库，也因此这类数据库就被称为<code>SQL database</code>。关系型数据库需要提前定义<code>模式(Schema)</code>，也就是说数据库中存储的数据的<code>属性(attributes)</code>及其数据格式需要被严格定义，而每条<code>数据(records)</code>都在相应属性上有一个值，也就是说不同数据之间的关系非常明确。</p><h4 id="可扩展性-Scalability">可扩展性(Scalability)</h4><p>关系型数据库一般只能<code>纵向扩展</code>，也就是说在同一个服务器中增加更多算力和空间(CPU,GPU,RAM等)，而如果要将关系型数据库分布在多个服务器上的话则需要改变数据结构等复杂操作。</p><h4 id="性能-Performance">性能(Performance)</h4><p>关系型数据库在处理<code>中小型数据规模</code>时性能较好，如果在数据库中加入<code>索引(index)</code>还能更加增强数据库<code>查询(QUERY)</code>和<code>连接(JOIN)</code>的效率。但如果数据量和用户访问量更大时，这类数据库性能就可能不足。</p><h4 id="安全性-Security">安全性(Security)</h4><p>由于数据高度结构化，关系型数据库的安全性保障不需要太麻烦。由于关系型数据库拥有<code>ACID</code>四大特性，分别是<code>原子性(Atomicity)</code>，<code>一致性(Consistency)</code>，<code>隔离性(Isolation)</code>和<code>持久性(Durability)</code>。这几个特性使得储存在关系型数据库中的数据有较高的<code>完整性(Integrity)</code>，这类数据库非常适合应用在金融电商等对数据完整性要求较高的应用场景。</p><h3 id="非关系型数据库-NoSQL">非关系型数据库(NoSQL)</h3><p><code>非关系型数据库</code>是各种非表结构数据库的共称，这类数据库有一些代表性的模型：</p><ul><li><code>文档类(Document-oriented)：</code>用JSON格式的文档存储，提取，管理数据。<code>代表有MongoDB</code>。</li><li><code>键值类(Key-value)：</code>这类数据库通常有一个哈希表，表中有一个特定的键和一个指针指向特定的数据，也就是说每一个值都与一个数据一一对应。代表有<code>Redis</code>。</li><li><code>图形类(Graph)：</code>使用图结构存储数据，将数据以边缘节点的形式存储，其中节点(node)代表的是数据，而边缘(edge)则代表数据之间的关系，这类数据库主要用来构建数据间的关系图谱。代表有<code>Neo4J</code>。</li><li><code>列存储类(Wide-column)：</code>将数据存储在非常多的列中，每一条数据都由键指向可能不同的列中，也即每条数据都可能拥有不同的属性。代表有<code>Cassandra</code>。</li></ul><h4 id="可扩展性-Scalability-2">可扩展性(Scalability)</h4><p><code>非关系型数据库</code>在数据量和访问量增加时，可以通过<code>横向扩容</code>(即增加更多服务器)来扩展容量。这些服务器共享数据，每个服务器仅储存一部分数据，这样每个服务器需要处理的平均访问次数也会减少。由于他们没有结构性的表，因此扩展不需要额外的操作。</p><h4 id="性能-Performance-2">性能(Performance)</h4><p>由于<code>非关系型数据库</code>的分布式特性，其性能普遍较高。这类数据库可以无限制地储存各种类型和格式的数据，改变已有的数据格式也会比较方便。</p><h4 id="安全性-Security-2">安全性(Security)</h4><p>安全性是<code>非关系型数据库</code>的一个主要弱点，更高的自由度就是以数据的完整性为代价。</p><h2 id="主要关系型数据库对比">主要关系型数据库对比</h2><p>由于非关系型数据库目前不在我的业务范围内，我就侧重对比研究一下关系型数据库的几个代表：<code>Oracle</code>, <code>MySQL</code>, <code>MS SQL Server</code>, <code>PostgreSQL</code>和<code>IBM DB2</code>。<a href="https://db-engines.com/en/ranking_trend" title="DB-Engines Ranking - Trend Popularity">DB-Engines网站</a>对各大数据库的流行趋势针对其在公共网络(如搜索引擎，开放职位描述，技术论坛等)上的出现频次进行打分排名：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/image-20220314010452079.png" alt="Oracle,MySQL,MS SQL Server, PostgreSQL,IBM DB2近年流行趋势对比"></p><p>可以看到尽管有下降趋势，<code>Oracle</code>, <code>MySQL</code>和<code>MS SQL Server</code>依然有绝对的热度，而相对的<code>PostgreSQL</code>近年趋势猛升，而<code>IBM DB2</code>作为关系型数据库的开拓者，其在近年的主要客户群体仅集中在金融行业(以银行，证券，保险，基金公司等，行业代表有花旗，渣打，汇丰，摩根斯坦利以及我司等，哈哈)，因此在大众的讨论热度比其他数据库要低。</p><h3 id="Oracle">Oracle</h3><p>大名鼎鼎的甲骨文公司，说他们开发的数据库管理系统是业界最著名应该也不会有太多人有异议。其目前支持将各种关系型及非关系型数据库在同一个数据库中管理。基本支持所有主流操作平台，性能好，功能强，稳定性好，安全性强但价格昂贵(免费版功能有限)。目前甲骨文开发的主要关注点在云计算方面。</p><p>其主要优点包括<code>创新力强，技术支持及文档资源完备，具备存储处理海量数据的能力</code>。主要缺点就是<code>贵(标准版单价17,500美元，企业版单价47,000美元)，且匹配其高性能其也需要较高的硬件和人员支持才能稳定运行</code>。</p><p>如果你有数以亿计的OLTP或数据仓库数据需要储存和处理且预算充足的话，Oracle是一个可以考虑的选择。</p><h3 id="MySQL">MySQL</h3><p>MySQL如今也是甲骨文公司的明星产品，是现在最知名的关系型数据库之一，与Oracle不同，MySQL是开源的。MySQL由C和C++编写而成，是网页开发组合LAMP的一大组成部分，其名字<code>LAMP</code>分别指<code>Linux(操作系统)</code>, <code>Apache(网页服务器)</code>, <code>MySQL(数据库)</code>和<code>PHP(脚本语言)</code>。可以在大部分主流平台运行。</p><p>其主要优点包括<code>免费安装，使用简单，结构不复杂，易于调试且支持云服务</code>。主要缺点在于<code>其底层代码逻辑不适于大型数据库，非完全开源导致一些特定功能不能被免费实现，另外有一些SQL标准操作不被MySQL支持</code>。</p><p>如果你只是想做一些小型的网页数据库，或者是数据量不大，复杂度不高的数据管理系统。</p><h3 id="MS-SQL-Server">MS SQL Server</h3><p>MS SQL Server是微软早期为与IBM在数据库领域竞争而开发的关系型数据库产品，它的主要特点继承了微软的发家秘诀，即可视化，易操作但只能在Windows环境中运行。操作MS SQL Server数据的语言是在SQL标准上发展的<code>Transact-SQL</code>语言。</p><p>其主要优点包括<code>针对不同应用场景的涵盖不同功能的各种版本，提供各种商业所需的数据相关附加服务，丰富的文档和社区支持以及云服务</code>等。主要缺点包括<code>贵，支持平台单一，调试复杂</code>。</p><p>如果你的的公司订阅了微软的其他产品服务，选择MS SQL Server可能是个不错的选择，微软对其不同产品之间的互动集成做得还是不错的，有助于增强用户体验。</p><h3 id="PostgreSQL">PostgreSQL</h3><p>PostgreSQL是开源的对象-关系数据库(object-relational database),其相较其他普通关系数据库的差别在于用户可以在PostgreSQL中编程实现自定义对象以实现存储更复杂的数据结构。PostgreSQL与MySQL有许多共同点并在此之上加强了扩展性与合规性，也因此它可以适用于各种不同的数据规模。可以在微软, iOS, 安卓等平台上运行。</p><p>其主要优点包括<code>可扩展性高，支持JSON, XML, H-Store等用户自定义的数据格式，拥有易于使用的第三方增强工具，完全开源</code>等。主要缺点在于<code>其文档没有统一标准，且数据库缺少完整性检查工具</code>。</p><p>如果你希望自己的数据库存储格式可以定制化并实现一定的数据分析功能，PostgreSQL可以是较好的选择。其在金融电信行业使用较多。</p><h3 id="IBM-DB2">IBM DB2</h3><p>尽管现在的热度不高，但DB2被认为是关系型数据库的开山鼻祖。其由C和C++编写，可以在UNIX，Linux，Windows服务器版本等多种环境下执行。</p><p>DB2的主要优点在于他<code>经过多年大量的实用测试没有出过大的问题，是一个非常值得信赖稳定的的数据库系统，其适用大规模数据且性能也较高</code>。主要缺点可能包括<code>文档和用户界面陈旧对新手不友好，操作较为复杂</code>。</p><p>目前DB2的主要用户都是金融公司，这些公司创建数据库比较早，但对技术变革不敏感，且依赖数据库的安全性和稳定性，因此留存为DB2用户。</p><h2 id="DB2与Oracle-SQL语法差别（参考资料）">DB2与Oracle SQL语法差别（<a href="https://www.cnblogs.com/wuxl360/p/5563019.html" title="DB2、ORACLE SQL写法的主要区别">参考资料</a>）</h2><p>由于我自己学的是Oracle的语法，但现在工作需要使用DB2的语法，因此找了一下网上大神们整理的这两者的区别汇总，发现<code>邬兴亮大神</code>的总结就是我想找的：</p><h3 id="数据类型转换函数">数据类型转换函数</h3><table><thead><tr><th></th><th>整形转字符</th><th>字符转整形</th><th>字符转浮点</th><th>浮点转字符</th><th>字符转日期</th><th>字符转时间</th><th>日期转字符</th></tr></thead><tbody><tr><td>Oracle</td><td>to_char(1)</td><td>to_number(‘1’)</td><td>to_number(‘1.1’)</td><td>to_char(1.1)</td><td>to_date(‘2007-04-26’,‘yyyy-mm-dd’)</td><td>to_date(‘2007-04-26 08:08:08’,‘yyyy-mm-dd hh25:mi:ss’)</td><td>to_char(to_date(‘2007-04-29’,‘yyyy-mm-dd’),‘yyyy-mm-dd’)</td></tr><tr><td>DB2</td><td>char(1)</td><td>int(‘1’)</td><td>double(‘1.1’)</td><td>char(1.1)</td><td>date(‘2007-04-26’)</td><td>to_date(‘2007-04-26 08:08:08’,‘yyyy-mm-dd hh25:mi:ss’)</td><td>char(date(‘2007-04-29’))</td></tr><tr><td>兼容写法</td><td>cast(1 as char)</td><td>cast(‘1’ as int)</td><td>无</td><td>无</td><td>无</td><td>相同</td><td>无</td></tr></tbody></table><h3 id="Where条件弱类型判断">Where条件弱类型判断</h3><p>在<code>Oracle</code>中使用<code>&quot;Where 字符型字段 in (整型)&quot;</code>是允许的，<code>DB2</code>则会报错：</p><blockquote><p>SELECT ‘abc’ FROM XXX WHERE ‘1’ in (1) 在Oracle下可通过，在DB2中会报错。</p></blockquote><p>在<code>Oracle中</code>使用<code>&quot;Where 字符型字段=整型&quot;</code>是允许的，<code>DB2</code>则会报错：</p><blockquote><p>SELECT ‘abc’ FROM XXX WHERE ‘1’=1 在Oracle下可通过，在DB2中会报错。</p></blockquote><h3 id="DATE数据类型">DATE数据类型</h3><p><code>Oracle</code>中<code>DATE型</code>带有<code>时分秒</code>，但<code>DB2</code>下<code>DATE型</code>只带有<code>年月日</code>且可以作为字符串直接操作，<code>DB2</code>中要记录<code>时分秒</code>必须使用<code>时间戳型(TIMESTAMP)</code>, DB2的日期和时间戳都可以被直接用字符串指定。</p><h3 id="Decode函数">Decode函数</h3><p><code>Oracle</code>中使用<code>decode()</code>函数来做判断语句：</p><blockquote><p>decode(sex,0,‘男’,1.‘女’) 即为将sex域中的0换为男，1换为女。</p></blockquote><p>在<code>DB2</code>中要实现这个功能需要用<code>CASE WHEN</code>写法：</p><blockquote><p>CASE sex WHEN  0 THEN ‘男’ WHEN 1 THEN ‘女’ ELSE ‘其他’ END</p></blockquote><h3 id="NVL函数">NVL函数</h3><p>在<code>Oracle</code>中<code>NVL</code>函数主要用来处理空值，即将域中空值替换为指定值：</p><blockquote><p>SELECT NVL(F_AREAID,‘空’) FROM MASA_USER</p></blockquote><p>在<code>DB2</code>中需要使用兼容性写法<code>COALESCE</code></p><blockquote><p>SELECT COALESCE(F_AREAID,‘空’,F_AREAID) FROM MASA_USER</p></blockquote><h3 id="获取系统当前日期">获取系统当前日期</h3><p>在<code>Oracle</code>中使用<code>SYSDATE</code>,而在<code>DB2</code>中使用<code>CURRENT DATE</code></p><h3 id="获取特定数量的数据">获取特定数量的数据</h3><p>在<code>Oracle</code>中使用<code>ROWNUM</code>:</p><blockquote><p>SELECT * FROM TABLE WHERE ROWNUM &lt;= 10</p></blockquote><p>在<code>DB2</code>中使用<code>FETCH</code>：</p><blockquote><p>SELECT * FROM TABLE FETCH FIRST 10 ROWS ONLY</p></blockquote><h1>最后</h1><p>这一篇写了很久，主要是确实对数据库的理解不深，需要看的资料比较多，最后主要学到的对我来说有用的东西可能还是<code>操作层面</code>的<code>SQL语法</code>，如果以后的工作中还发现新的区别再来这里补充。</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/">数据分析</category>
      
      
      <category domain="http://raylei.space/tags/Database/">Database</category>
      
      <category domain="http://raylei.space/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/">工作学习</category>
      
      
      <comments>http://raylei.space/2022/03/09/10-introduction-to-different-db/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[博客维护]Jsdelivr CDN的图片缓存更新的解决方案</title>
      <link>http://raylei.space/2022/03/09/9-keep-cdn-pics-updated/</link>
      <guid>http://raylei.space/2022/03/09/9-keep-cdn-pics-updated/</guid>
      <pubDate>Wed, 09 Mar 2022 14:20:36 GMT</pubDate>
      
      <description>[第9篇]本篇记录一下我为了让Jsdelivr CDN能及时更新我更改过的博客图片所尝试的努力和最后的解决方案。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>我在我的<a href="http://raylei.space/2022/02/12/2-typora_picgo_config/" title="使用 Typora 和 PicGo 简单便捷地编辑带图博文">第二篇博文</a>中曾经提到过为了加速世界各地的人访问博客图片的速度，我们需要使用<code>Jsdelivr</code>的<code>CDN</code>服务，但<code>CDN</code>在带来一些便捷的同时也带来了<code>一些问题</code>。比如如果我们对远程仓库中的某些图片做了<code>修改</code>(而不是添加一个新的图片)，这种情况下<code>Jsdelivr</code>的缓存文件却可能<code>不会马上被更新</code>，所以我们需要使用一些方法使我们修改后的图片能实时反映在我们的网站中，本篇就记录一下我尝试的方法和最终的解决方案。</p><h1>正文</h1><p>要搞清楚图片缓存不能按时更新的主要原因，首先先要了解一下<code>Jsdelivr</code>到底是怎么运作的。我在第二篇文章里简单地介绍过他的基本原理就是将上传的资料缓存在各地的边缘服务器中，然后每次链接被请求时直接从距离请求最近的服务器中响应请求。而从<code>JSdelivr</code>的官网中我们可以看到它具体的实现方法如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/infographics.png" alt="JSdelivr工作原理图"></p><p>可以注意到<code>Jsdelivr</code>除了拥有我们之前介绍的缓存服务器以外还有一项功能，是由<code>亚马逊</code>提供的<code>S3云储存服务</code>。根据其官方的介绍：</p><blockquote><p>We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p></blockquote><p>可以想象他们的做法是每当<code>Github</code>中发布新的<code>release</code>之后马上将新的资产复制至<code>S3空间</code>，这样即使<code>GitHub崩溃</code>或者<code>原作者删除掉仓库或release</code>这些已经存储的文件也不会丢失，只有<code>S3崩溃</code>的时候他们才会再从<code>GitHub</code>拉数据。这个做法第一眼看就知道是利弊共存的。显然他们的做法保证了数据的可用性，但随之而来的问题就是更改数据的成本增加了，我的每次更改都要同步到S3，而似乎<code>Jsdelivr</code>在这点上做得并不好，我估计可能和他们备份和引用方式的底层逻辑有关，导致他们实时同步数据的成本非常高。</p><h2 id="清除缓存">清除缓存</h2><p>在网上看了一些<a href="https://www.tgee.cn/jsdelivr-cdn.html" title="Jsdelivr CDN 缓存清除">其他人的分享</a>，大多数人都会介绍使用<code>endpoint purge</code>调用<code>Jsdelivr</code>缓存清除功能的方法，来强制刷新缓存。具体用法只是在浏览器中将需要引用的<code>Jsdelivr</code>链接前的<code>cdn</code>替换为<code>purge</code>然后发送请求就会让<code>Jsdelivr</code>将该链接的缓存强制刷新。但似乎现在这个功能已经被禁用了，在<code>Jsdelivr</code>的官网上我没有看到任何类似的记录，仅仅只有<a href="https://www.jsdelivr.com/tools/purge" title="Jsdelivr Purge Tool">一个页面</a>表明<code>Jsdelivr</code>正在开发清除缓存的工具。</p><p>从<a href="https://blog.juanertu.com/archives/cbcd1946.html" title="解决 jsdelivr 缓存问题的几个办法">别的博主的博文</a>中可以看到，如果要使用前面提到的<code>Purge方法</code>可能需要向-dak@prospectone.io发邮件请求，但我自己并没有在文档中找到这句话，可能是在<code>Jsdelivr</code>的<code>API文档</code>中吧。但总之<code>Purge</code>这个方法现在也是没有那么方便了，只能看有生之年能不能等到这个官方工具出炉了，先想想还有没有别的方法。</p><h2 id="引用版本号">引用版本号</h2><p>其实一般对文件加版本号的引用方法其实非常稳定，也即：</p><blockquote><p><code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code></p></blockquote><p>但这个方法比较麻烦的地方在于，我们一般是用<code>Typora</code>来插入图片，然后使用提前设置好的<code>Jsdelivr</code>链接地址来引用图片，但<code>Typora</code>并不知道你接下来的版本号是多少，所以如果用这种方法的话你还需要在每次引用图片后再手动在每个图片链接中加入版本号，这就非常麻烦了。而<a href="https://www.jsdelivr.com/" title="Jsdelivr website">官方文档</a>提供的另一个更<code>consistent</code>的方式：</p><blockquote><p>Omit the version completely or use “latest” to load the latest one (not recommended for production usage)<br><code>https://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js</code><br><code>https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</code></p></blockquote><p>去掉版本号或者将版本号用<code>latest</code>替代就可以固定引用<code>最新版本的release</code>，但实际使用后发现这个方法依然不太稳定，<code>新release</code>的文件的确可以无缝访问，但如果是旧文件修改后，使用这个方法依然可能导致直接引用旧文件。<code>所以看起来Jsdelivr只从文件名判断一个文件是不是已经存在了S3空间中。</code></p><h2 id="解决办法">解决办法</h2><p>既然<code>Jsdelivr</code>是从<code>文件名</code>判断是否更新缓存，那么其实最直接的更新缓存的方法就是<code>改文件名</code>了。我使用的方法是把所有文件链接改成<code>@latest</code>版本，这样每次引用的版本都会是最新版本，但如果对过去已经上传过的图片要做更改，那可以在更改后的文件中加上一些更改的<code>备注信息</code>，例如<code>a_picture.png</code>改成<code>a_picture_v1.png</code>再上传，这样对文件链接的修改也仅只是增加的<code>_v1部分</code>，加上修改图片本身就是相对不常有的操作，所以这个方法已经足以解决我的问题了。</p><h2 id="一个疑惑">一个疑惑</h2><p>在尝试解决这个问题的中途我曾经尝试过<code>删除以前的release和tag</code>的方法，当时我对<code>Jsdelivr</code>的运作方法还不是很了解，以为删除了已经发布的<code>release</code>就可以彻底解决链接至旧文件的问题。现在虽然知道这个方法不可行，但中途出现了一个现象却开始让我对<code>Jsdelivr</code>的业务逻辑产生了一些疑惑。</p><p>这个问题就是我曾经以<code>v1.0.2</code>的版本号发布过一个<code>release</code>,后来我删除了这个<code>release</code>并且以相同的<code>v1.0.2</code>这个<code>tag</code>发布了一个新的<code>release</code>，其他都非常正常，我可以在<code>新的v1.0.2</code>中访问一些<code>旧的v1.0.2</code>中没有加入过的文件，但其中有一张我修改过的图，却一直显示的是<code>旧v1.0.2</code>中的内容，即使我反复确认过<code>新的v1.0.2</code>中这张图的名称完全没有改变，而且内容也确实与旧版本不同，但如果在版本号中加入<code>@v1.0.3</code>(我已经删掉的版本)却可以找到新加的图片。</p><p>而当我使用官网提供的查看<code>Jsdelivr</code>目录的方式(<code>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/</code>)进入目录时却发现这里并<code>没有v1.0.3版本</code>，而<code>v1.0.2</code>中那张修改过的图片也确实是<code>旧版</code>。</p><p>这些奇怪的现象让我确实难以理解<code>Jsdelivr</code>的逻辑究竟是如何。难道它按<code>链接</code>保存<code>单个文件</code>后储存在某个空间中作为<code>base</code>，然后从<code>新的release</code>中对比各个文件的链接然后<code>逐个更新</code>至这个<code>base</code>中？那即使是这样他也可以实现将<code>同名文件</code>用<code>新release中的版本</code>替代啊。希望以后对<code>Jsdelivr</code>的使用增加能解决我的这个疑惑。</p><h1>最后</h1><p>这篇文章主要是记录了<code>Jsdelivr</code>使用相关的一些知识和经过研究对这个CDN服务和逻辑的一些了解与猜测，最后更新缓存图片的解决方案其实让我有些不太满意，但想着官方清除缓存的工具都快出来了，那就再等等吧。</p><p>[第9篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/">博客维护</category>
      
      
      <category domain="http://raylei.space/tags/Git/">Git</category>
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      <category domain="http://raylei.space/tags/Github/">Github</category>
      
      
      <comments>http://raylei.space/2022/03/09/9-keep-cdn-pics-updated/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[信息安全]解码微信PC版中以dat格式存储的聊天图片</title>
      <link>http://raylei.space/2022/03/04/8-decrypt-wechat-pics/</link>
      <guid>http://raylei.space/2022/03/04/8-decrypt-wechat-pics/</guid>
      <pubDate>Fri, 04 Mar 2022 14:00:09 GMT</pubDate>
      
      <description>[第8篇]本篇中我稍微深入了解了一下微信存储聊天图片的方式(.dat文件)以及相应的解码方式。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>最近有些好奇微信PC版的聊天文件在本地是如何保存的，因为这些文件要兼顾<code>可以快速随时访问</code>，又要<code>不能直接在文件夹中展示</code>，所以稍微研究了一下，发现原来这些文件虽然是被加密过,但解码的方法其实非常简单(与其说被加密不如说只是让它不能直接打开而已)，这里就分享一下这个dat文件的<code>解码原理</code>和我写的<code>解码小脚本</code>。</p><h1>正文</h1><h2 id="方法论">方法论</h2><p>我首先找到的是<a href="https://blog.csdn.net/ainivip/article/details/111772428" title="微信Dat文件解码">这篇文章</a>，通过这篇文章我知道了两个原先不知道的小知识，<code>第一</code>是jpg有固定的<code>标识符FF D8</code>来标记图像的起始位置，<code>第二</code>是dat文件的加密方式是对图片文件的每一个字节做一个固定数值的<code>异或运算(XOR)</code>(既以比特(bit)各位计算，两值不同返回1，两值相同返回0，运算符号为⊕)，<code>异或运算</code>的一个重要特性就是<code>自反性</code>，既：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>⊕</mo><mi>b</mi><mo>⊕</mo><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \oplus b \oplus a = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>而我们现在已经有了一个经过<code>特定数值x</code>异或处理过的<code>FF D8</code>，那么我们只要在这个基础上再使用<code>FF D8</code>进行异或运算就能倒算出这个特定的数值<code>x</code>，既：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mn>0</mn><mi mathvariant="normal">x</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">d</mi><mn>8</mn><mtext> </mtext><mo>⊕</mo></mrow><mtext> </mtext><mi>x</mi><mtext> </mtext><mrow><mo>⊕</mo><mtext> </mtext><mn>0</mn><mi mathvariant="normal">x</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">d</mi><mn>8</mn></mrow><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\mathrm{0xffd8\ \oplus}\ x\ \mathrm{\oplus \ 0xffd8}=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathrm">0xffd8</span><span class="mspace"> </span><span class="mord">⊕</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace"> </span><span class="mord"><span class="mord">⊕</span><span class="mspace"> </span><span class="mord mathrm">0xffd8</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span></p><p>然后使用这个计算出来的<code>x</code>将<code>dat文件</code>中的所有字节都进行异或运算就可以得到原来的图片数据了。我们可以先小试一下实际是不是这样。</p><h2 id="小实验">小实验</h2><p>我们就借用<a href="https://blog.csdn.net/ainivip/article/details/111772428" title="微信Dat文件解码">这位大佬</a>的代码和思路，先随便拿张图试试。先用我大佬0总推荐的<a href="https://www.sublimetext.com/" title="Sublime Text website">sublime text编辑器</a>的十六进制模式查看一下这个被抽中的幸运图片的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220305125220649.png" alt="dat文件开头是'6641'"></p><p>这时用计算器的程序员模式算一下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">x</mi><mn>6641</mn><mo>⊕</mo><mn>0</mn><mi mathvariant="normal">x</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">d</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">\mathrm{0x6641\oplus 0xffd8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathrm">0x6641</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm">0xffd8</span></span></span></span></span>的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220305125751063.png" alt="结果是'9999'，因此可知x是'99'"></p><p>那就把这个<code>幸运图片(.dat)</code>的每一个字节对<code>99</code>做一次<code>异或运算</code>吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">imageDecode</span>(<span class="params">f</span>):</span><br><span class="line">    dat_read = <span class="built_in">open</span>(f,<span class="string">&quot;rb&quot;</span>) <span class="comment"># 打开这个图片</span></span><br><span class="line">    out = <span class="string">&quot;00.png&quot;</span> </span><br><span class="line">    png_write = <span class="built_in">open</span>(out, <span class="string">&quot;wb&quot;</span>) <span class="comment"># 定义一个输出写入的文件</span></span><br><span class="line">    <span class="comment"># 遍历每一个字节并对每一个字节做99的异或运算后写入新png文件</span></span><br><span class="line">    <span class="keyword">for</span> now <span class="keyword">in</span> dat_read:</span><br><span class="line">        <span class="keyword">for</span> nowByte <span class="keyword">in</span> now:</span><br><span class="line">            newByte = nowByte ^ <span class="number">0x99</span></span><br><span class="line">            png_write.write(<span class="built_in">bytes</span>([newByte]))</span><br><span class="line">    <span class="comment">#关闭两个文件</span></span><br><span class="line">    dat_read.close()</span><br><span class="line">    png_write.close()</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;0b64663254a42d95d4546fd03a85d921.dat&quot;</span></span><br><span class="line">imageDecode(name)</span><br></pre></td></tr></table></figure><p>运行后发现果不其然，图片信息被还原了：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220305130647692.png" alt="image-20220305130647692"></p><p>看来方法是没有问题的，但似乎用计算器算x这个步骤有些脱裤放屁的嫌疑了，直接用Python算好了自己代进去不就好了，这样就可以把解码步骤一般化啦。那就改进一下吧。</p><h2 id="改进一下">改进一下</h2><p>我想让解码的工作更加方便快捷一些，只需要把我们的exe文件放进微信的存储文件夹下运行就可以自动解码所有的文件并且放在一个固定的文件夹中，这里我假设<code>每个文件夹中的dat文件都用相同的字节加密</code>，所以每次打开一个文件夹，程序都会用文件夹中的第一个dat文件的第一个字节来解码得到解码字节。</p><p>但事实上根据我的观察，似乎这个解码字节似乎是根据主机与用户号生成，也就是说同一个用户在同一台主机中的图片文件都被用同一个解码字节加密成dat文件，但用这个程序也不需要管那么多了，只要你没有把不同用户的dat文件混合在一个文件夹下就都没有问题。于此同时，我还给程序加了一些可视化的<code>进度条</code>，这样解码大量文件时也不会等得茫然。废话少说，放代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_decode_key</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="comment"># 读取文件第一个字节并与0xFF做异或运算以得到解码字节</span></span><br><span class="line">    dat_read = <span class="built_in">open</span>(file, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    head = dat_read.read(<span class="number">1</span>)</span><br><span class="line">    x = <span class="built_in">int</span>.from_bytes(head, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    dat_read.close()</span><br><span class="line">    <span class="keyword">return</span> x ^ <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_decode</span>(<span class="params">file_in, file_out ,key</span>):</span><br><span class="line">    <span class="comment"># 将图片中每个字节分别与解码字节做异或运算并输出结果至指定地点</span></span><br><span class="line">    dat_read = <span class="built_in">open</span>(file_in,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    out = os.path.join(file_out)+<span class="string">&quot;.png&quot;</span></span><br><span class="line">    png_write = <span class="built_in">open</span>(out, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> now <span class="keyword">in</span> dat_read:</span><br><span class="line">        <span class="keyword">for</span> nowByte <span class="keyword">in</span> now:</span><br><span class="line">            newByte = nowByte ^ key</span><br><span class="line">            png_write.write(<span class="built_in">bytes</span>([newByte]))</span><br><span class="line">    dat_read.close()</span><br><span class="line">    png_write.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_all</span>():</span><br><span class="line">    <span class="comment"># 列出当前文件夹下的所有文件</span></span><br><span class="line">    fsinfo = os.listdir()</span><br><span class="line">    num_folders = <span class="built_in">len</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> fsinfo <span class="keyword">if</span> os.path.isdir(x) <span class="keyword">and</span> x <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;.idea&quot;</span>, <span class="string">&quot;result&quot;</span>)])</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个result文件夹来存储结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;result&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> fsinfo:</span><br><span class="line">        os.makedirs(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.rmtree(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">        os.makedirs(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历当前文件夹中的所有子文件夹</span></span><br><span class="line">    <span class="comment"># 并将里面所有dat文件进行解码后放入result文件夹中的相应位置</span></span><br><span class="line">    <span class="keyword">for</span> folders <span class="keyword">in</span> fsinfo:</span><br><span class="line">        <span class="comment"># 只对文件夹中的内容解码</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(folders) <span class="keyword">and</span> folders <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;.idea&quot;</span>, <span class="string">&quot;result&quot;</span>):</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Folders to be decoded: %s/%s&quot;</span> % (i, num_folders))</span><br><span class="line">            temp_path = os.path.join(<span class="string">&quot;result&quot;</span>, folders)</span><br><span class="line">            os.makedirs(temp_path)</span><br><span class="line">            key_flag = <span class="literal">False</span> <span class="comment"># 每个文件夹只对第一个文件提取解码字节</span></span><br><span class="line">            dat_files = [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(folders) <span class="keyword">if</span> x.endswith(<span class="string">&quot;.dat&quot;</span>)] <span class="comment"># 只看文件夹中的dat文件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(dat_files) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;No dat file in this folder&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 对每个文件夹中的dat文件分别解码并放入“result”文件夹中的相应位置</span></span><br><span class="line">                <span class="keyword">for</span> files <span class="keyword">in</span> tqdm(dat_files, desc=<span class="string">&quot;Folder%s: &quot;</span> % i):</span><br><span class="line">                    output_path = os.path.join(temp_path, files)</span><br><span class="line">                    <span class="keyword">if</span> key_flag <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                        file_path = os.path.join(folders, files)</span><br><span class="line">                        key = get_decode_key(file_path)</span><br><span class="line">                        image_decode(file_path, output_path, key)</span><br><span class="line">                        key_flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        file_path = os.path.join(folders, files)</span><br><span class="line">                        image_decode(file_path, output_path, key)</span><br><span class="line">            <span class="keyword">if</span> i == num_folders:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;All Jobs Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    decode_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="打包测试一下">打包测试一下</h2><p>用py2exe包把文件打包成一个<code>exe文件</code>，大小大概<code>7.6M</code>比较合理。把这个exe文件复制去我自己的微信image文件夹下双击运行，程序就开始慢慢跑起来了。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220306195549214.png" alt="把exe文件放在微信image文件夹下双击便可运行"></p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics@latest/post_img/image-20220306195720817.png" alt="所有图片都被复原了~！"></p><p>结果非常完美！运行体验也很好！</p><h2 id="软件下载">软件下载</h2><p>我把这个exe文件放在这里<code>转需</code>，也可以看看自己的微信里都缓存了些什么玩意：<a href="/attachment/wechat_img_decryption.exe">文件下载</a></p><h2 id="补充一个小bug的解决思路">补充一个小bug的解决思路</h2><p>我发现有一种情况可能导致解码失败，那就是当微信聊天的图片不仅仅有<code>jpg格式</code>还有<code>png格式</code>时，我们如果第一步获取解码字节是从这些<code>png加密的dat文件中</code>获取,这些图片的文件头是<code>89 50</code>(来自<a href="https://blog.csdn.net/weixin_30847865/article/details/96186989" title="利用文件头标志判断文件类型">这篇博文</a>，非常有用马克一下)，但我们是使用<code>jpg格式</code>的文件头<code>FF D8</code>来获取，这会导致获得错误的解码字节，从而导致一整个文件夹都解码失败。</p><p>我已经想到了一个<code>解决办法</code>，因为dat文件不管是<code>png图片</code>还是<code>jpg图片</code>都会被同一个解码字节进行异或处理，那也就是说因为异或运算的自反性，使用加密后的字节1与加密后的字节2进行异或运算所得的结果<code>与其加密前的异或结果会是一样的</code>，如下式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mrow><mtext>字节</mtext><mn>1</mn><mtext> </mtext><mo>⊕</mo></mrow><mtext> </mtext><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mrow><mo>⊕</mo><mtext> </mtext><mo stretchy="false">(</mo><mtext>字节</mtext><mn>2</mn><mtext> </mtext><mo>⊕</mo></mrow><mtext> </mtext><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mrow><mtext>字节</mtext><mn>1</mn><mtext> </mtext><mo>⊕</mo><mtext> 字节</mtext><mn>2</mn></mrow><mo stretchy="false">)</mo><mtext> </mtext><mrow><mo>⊕</mo><mtext> </mtext></mrow><mi>x</mi><mtext> </mtext><mrow><mo>⊕</mo><mtext> </mtext></mrow><mi>x</mi><mo>=</mo><mrow><mtext>字节</mtext><mn>1</mn><mtext> </mtext><mo>⊕</mo><mtext> 字节</mtext><mn>2</mn></mrow></mrow><annotation encoding="application/x-tex">(\mathrm{字节1\ \oplus}\ x)\ \mathrm{\oplus \ (字节2\ \oplus}\ x)=(\mathrm{字节1\ \oplus\ 字节2})\ \mathrm{\oplus \ }x\ \mathrm{\oplus \ }x=\mathrm{字节1\ \oplus\ 字节2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">1</span><span class="mspace"> </span><span class="mord">⊕</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord"><span class="mord">⊕</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">2</span><span class="mspace"> </span><span class="mord">⊕</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">2</span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord"><span class="mord">⊕</span><span class="mspace"> </span></span><span class="mord mathnormal">x</span><span class="mspace"> </span><span class="mord"><span class="mord">⊕</span><span class="mspace"> </span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathrm cjk_fallback">字节</span><span class="mord mathrm">2</span></span></span></span></span></span></p><p>而<code>png</code>的文件头<code>89 50</code>进行异或运算结果为<code>D9</code>，这与<code>FF D8</code>两字节的异或运算结果<code>27</code>是不一样的，由此我们可以增加一个判断，将dat文件的头两个字节进行异或运算，若得出结果为<code>27</code>，则判断<code>加密前为jpg文件</code>，使用<code>FF D8来获得解码字节</code>；若得出结果为<code>D9</code>，则判断<code>加密前为png文件</code>，使用<code>89 50来获得解码字节</code>。只要解码字节获取成功，后面的解码操作其实都是一样的。但我懒得改代码了，<code>反正也没那么多png图片</code>，有需要的自己把思路拿去改吧。</p><h1>最后</h1><p>通过这一次的这个好奇心驱使下的学习，实际上除了主题相关的<code>图片格式</code>，<code>微信dat文件加密</code>方式等等以外，最重要的是我重新复习了一下<code>Python操作文件</code>，<code>显示进度条</code>以及<code>打包</code>等等内容，都是非常基础但需要熟能生巧的技能。</p><p>[第8篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/">信息安全</category>
      
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      <category domain="http://raylei.space/tags/%E5%BE%AE%E4%BF%A1/">微信</category>
      
      <category domain="http://raylei.space/tags/%E8%A7%A3%E7%A0%81/">解码</category>
      
      
      <comments>http://raylei.space/2022/03/04/8-decrypt-wechat-pics/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[英语学习]《唐顿庄园》第1季第1集学习笔记</title>
      <link>http://raylei.space/2022/03/01/7-Downton_Abbey_S01E01/</link>
      <guid>http://raylei.space/2022/03/01/7-Downton_Abbey_S01E01/</guid>
      <pubDate>Tue, 01 Mar 2022 05:54:29 GMT</pubDate>
      
      <description>[第7篇]本篇首先讲讲我平时学英语的方法，然后记录唐顿庄园第一季第一集出现的需要注意的词句等。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>用英语用了这么多年，在英语学习上面已经不需要再在乎太多语法发音之类的问题了，因为在我看来那些都已经不会太大影响到英语水平，以实用为标准的话现在学习英语需要提升的主要是欧美的文化习惯和词汇量了。个人认为最好的办法就是认真地在欧美流行的电视剧或电影中学习他们的表达，这样既可以避免学到生僻没用的单词，也可以在一个流畅的语境下学习到新的表达甚至温故知新。</p><h1>正文</h1><h2 id="学习方法">学习方法</h2><p>首先一定要建立认知，看剧不是目的，学英语才是目的。只有在心里认知了这个目的，才能在之后的学习中不会急躁，因为我的方法非常慢但也非常稳。简单来说就是每集剧看3遍：</p><p><code>第一遍：</code>无字幕看第一遍，第一遍的目的首先是建立对剧情发展的一个基本认识，另外对哪些部分看不懂的也会有比较清晰的认识，最后这也是建立兴趣的关键一步，因为有了第一遍的“看不懂”的对比，第三遍时“完全看懂”才能提供成就感的反馈，激励自己更长久地学习。</p><p><code>第二遍：</code>对着剧的脚本一句话一句话地看剧，记录<code>不熟悉</code>或者<code>能听能看但不会用</code>的词和表达，我首先会用有道的<code>Collins词典</code>查释义(<code>Collins</code>的特点是将词放在英语的上下文中解释，非常适合<code>非母语者</code>快速了解单词的用法)，如果<code>Colins</code>没有收录才去查其他词典或例句。第二遍这个过程是最痛苦的，有时候一个1小时的剧要看4小时才能看完，实在不行就分几天看完，一定不能急躁。</p><p><code>第三遍：</code>最后再无字幕看一遍，这一遍是最爽的了。看完前两遍第三遍时基本上已经无障碍看剧了，看着剧里那些生僻的表达和含糊的口语都在脑海里清晰地形成文本，这时候就会感觉学习真是太爽了。</p><h2 id="学习资源">学习资源</h2><p>我的无字幕资源是在这个网站下载的，记得好像也不是免费来着，大家有更好的资源求分享:<a href="https://www.ostmovie.net/downton-abbey-season-12010/">点击链接</a></p><p>《唐顿庄园》第一季的字幕脚本我是从网上找的: <a href="/attachment/DowntonAbbey_Script.pdf">点击下载</a></p><h2 id="故事梗概">故事梗概</h2><p>第1季第1集主要体现唐顿庄园的贵族与仆人们生活状态，通过各种小事介绍剧中各主要人物的背景与个性。主要内容是泰坦尼克沉没后导致Lord Robert Grantham的两个继承人去世从而引出的唐顿庄园的遗产继承问题，主要矛盾在于Lord Grantham对第三顺位继承者Matthew不熟悉，家中就是否挑战继承权以将遗产继承给大女儿Mary展开辩论，最后因为Duke of Crowborough的上门让Lord Grantham坚定了维护继承法顺位的意志，并通知Mathew他的继承权。</p><h2 id="学习笔记">学习笔记</h2><h3 id="生词">生词</h3><h4 id="cease">cease</h4><ul><li><p>If something <code>ceases</code>, it stops happening or existing. (At one o’clock the rain had <code>ceased</code>.)</p></li><li><p>If you <code>cease to</code> do something, you stop doing it. (He never <code>ceases to</code> amaze me.)</p></li><li><p>If you <code>cease</code> something, you stop it happening or working.(The Tundra Times, a weekly newspaper in Alaska, <code>ceased</code> publication this week.)</p></li></ul><h4 id="handiwork">handiwork</h4><ul><li>You can refer to something that you have done or made yourself as your <code>handiwork</code>.(The architect stepped back to admire his <code>handiwork</code>.)</li></ul><h4 id="Kedgeree">Kedgeree</h4><ul><li><p><code>Kedgeree</code> is a cooked dish consisting of rice, fish and eggs.</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301160302387.png" alt="Kedgeree"></p></li></ul><h4 id="dreadful">dreadful</h4><ul><li>If you say that something is <code>dreadful</code>, you mean that it is very bad or unpleasant, or very poor in quality. (They told us the <code>dreadful</code> news.)</li><li><code>Dreadful</code> is used to emphasize the degree or extent of something bad. (We’ve made a <code>dreadful</code> mistake.)</li></ul><h4 id="mourning">mourning</h4><ul><li><code>Mourning</code> is behaviour in which you show sadness about a person’s death. (Expect to feel angry, depressed and confused. It’s all part of the <code>mourning</code> process.)</li><li>If you are <code>in mourning</code>, you are dressed or behaving in a particular way because someone you love or repect has died. (Yesterday the whole of Greece was <code>in mourning</code>.)</li></ul><h4 id="attic">attic</h4><ul><li>An <code>attic</code> is a room at the top of a house just below the roof.</li></ul><h4 id="snuff">snuff</h4><ul><li>Snuff is powdered tobacco which people take by breathing it in quickly though their nose.</li></ul><h4 id="speak-up">speak up</h4><ul><li>If you <code>speak up</code>, you say something, especially to defend a person or protest about something, rather than just saying nothing. (Uncle Herbert never argued, never <code>spoke up</code> for himself.)</li><li>If you ask someone to <code>speak up</code>, you are asking them to speak more loudly. (I’m quite deaf. you’ll have to <code>speak up</code>.)</li></ul><h4 id="luncheon">luncheon</h4><ul><li>A <code>luncheon</code> is a formal lunch, for example, to celebrate an important event or to raise money for charity. (Earlier this month, a <code>luncheon</code> for former U.N. staff was held in Vienna.)</li></ul><h4 id="hail">hail</h4><ul><li>If a person, event, or achievement <code>is hailed as</code> important or successful, they are praised publicly. (Faulkner has <code>been hailed as</code> the greatest American novelist of his generation.)</li><li><code>Hail</code> consists of small balls of ice that fall like rain from the sky. (… a sharp short-lived storm with heavy <code>hail</code>.)</li><li><code>A hail of</code> things, usually small objects, is a large number of them that hit you at the same time and with great force. (The victim was hit by <code>a hail of</code> bullets.)</li><li>Someone who <code>hails from</code> a particular place was born there or lives there. (He <code>hails from</code> Memphis.)</li><li>If you <code>hail a taxi</code>, you wave at it in order to stop it because you want the driver to take you somewhere. (I hurried away to <code>hail a taxi</code>.)</li></ul><h4 id="daunting">daunting</h4><ul><li>Something that is <code>daunting</code> makes you feel slightly afraid or worried about dealing with it. (He and his wife Jane were faced with the <code>daunting</code> task of restoring the gardens to their former splendour.)</li></ul><h4 id="cemetery">cemetery</h4><ul><li>A <code>cemetery</code> is a place where dead people’s bodies or their ashes are buried.</li></ul><h4 id="solicitor">solicitor</h4><ul><li>In the United States, a <code>solicitor</code> is the chief lawyer in a government or city department.</li></ul><h4 id="take-on">take on</h4><ul><li>If you <code>take on</code> a job or responsibility, especially a difficult one, you accept it. (No other organization was able or willing to <code>take on</code> the job.)</li><li>If something <code>takes on</code> a new appearance or quality, it develops that appearance or quality. (Believing he had only a year to live, his writing <code>took on</code> a feverish intensity.)</li><li>If you <code>take someone on</code>, you employ them to do a job. (He’s spoken to a publishing company. They are going to <code>take him on</code>.)</li><li>If you <code>take someone on</code>, you fight them or compete against them, especially when they are bigger or more powerful than you are. (Democrats were reluctant to <code>take on a president</code> whose popularity ratings were historically high.)</li></ul><h4 id="eccentric">eccentric</h4><ul><li>If you say that someone is <code>eccentric</code>, you mean that they behave in a strange way, and have habits or opinions that are different from those of most people. (He is an <code>eccentric</code> character who likes wearing a beret and dark glasses.)</li></ul><h4 id="peculiar">peculiar</h4><ul><li>If you describe someone or something as <code>peculiar</code>, you think that they are strange or unusual, sometimes in an unpleasant way. (Mr. Kennet has a rather <code>peculiar</code> sense of humor.)</li><li>If something is <code>peculiar to</code> a particular thing, person, or situation, it belongs or relates only to that thing, person, or situation. (Punks, soldiers, hippies, and Sumo wrestlers all have distinct hair styles, <code>peculiar to</code> their group.)</li></ul><h4 id="nurture">nurture</h4><ul><li>If you <code>nurture</code> something such as a young child or a young plant, you care for it while it is growing and developing. (Parents want to know the best way to <code>nurture</code> and raise their child to adulthood.)</li><li><code>Nurture</code> can also be a noun where it is care and encouragement that is given to someone while they are growing and developing. (The human organism learns partly by nature, partly by <code>nurture</code>.)</li></ul><h4 id="nuisance">nuisance</h4><ul><li>If you say that someone or something is a <code>nuisance</code>, you mean that they annoy you or cause you a lot of problems. (He could be a bit of a <code>nuisance</code> when he was drunk.)</li></ul><h4 id="chaperones">chaperones</h4><ul><li>A <code>chaperon</code> is someone who accompanies another person somewhere in order to make sure that they do not come to any harm.</li></ul><h4 id="pry">pry</h4><ul><li>If someone <code>pries</code>, they try to find out about someone else’s private affairs, or look at their personal possessions. (We do not want people <code>prying</code> into our affairs.)</li></ul><h4 id="coy">coy</h4><ul><li>A <code>coy</code> person is shy, or pretends to be shy, about love and sex. (I was sickened by the way Carol charmed all the men by turning <code>coy</code>.)</li><li>If someone is being <code>coy</code>, they are unwilling to talk about something that they feel guilty or embarrassed about. (Mr. Alexander is not the slightest bit <code>coy</code> about his ambitions.)</li></ul><h4 id="come-off">come off</h4><ul><li>If something <code>comes off</code>, it is successful or effective. (It was a good try but it didn’t <code>come off</code>.)</li><li>If someone <code>comes off worst</code> in a contest or conflict, they are in the worst position after it. If they <code>come off best</code>, they are in the best position. (Some Democrats still have bitter memories of how they <code>came off worst</code> during the investigation.)</li></ul><h4 id="dalliance">dalliance</h4><ul><li>If two people have a brief romantic relationship, you can say that they have a <code>dalliance</code> with each other, especially if they do not take it seriously.</li></ul><h4 id="conscience">conscience</h4><ul><li>Your <code>conscience</code> is the part of your mind that tells you whether what you are doing is right or wrong. If you have a <code>guilty conscience</code>, you feel guilty about something because you know it was wrong. If you have a <code>clear conscience</code>, you do not feel guilty because you know you have done nothing wrong. (What if he got a guilty conscience and brought it back?)</li></ul><h4 id="interlude">interlude</h4><ul><li>An <code>interlude</code> is a short period of time when an activity or situation stops and something else happens.</li></ul><h3 id="需要熟悉的词">需要熟悉的词</h3><ul><li>lit是light的过去式，即点亮。</li><li>crouch: 蹲；蹲下</li><li>burner: 炉灶</li><li>milk train: 早班火车(因为通常运送牛奶的是最早的一班火车)</li><li>butler: 管家</li><li>cedar-lined cupboards: 雪松木的衣柜</li><li>studs: 金属饰纽</li><li>hoard: 收藏；贮藏</li><li>reluctant: 抗拒</li><li>drawing room: 客厅</li><li>flatter: 高看；奉承</li><li>late husband: 已故的丈夫</li><li>swag: 赃物；窗饰</li><li>dowry: 嫁妆</li><li>entail: 继承权</li><li>tongue-tied: 因拘谨而说不出话</li><li>in the presence of: 在…面前</li><li>comrade: 同伴(尤其指共患难的)；战友</li><li>brass: 黄铜</li><li>sprinkle on…: 洒在…上</li><li>dispiriting: 令人沮丧的</li><li>unjust: 不公平；不公正</li><li>tenner: 十英镑纸币</li><li>turn up: 出现</li><li>crippled: 残疾的</li><li>tremendous: 巨大的；极好的</li><li>glare: 怒视；刺眼的光</li><li>vapours: 蒸汽</li><li>Be that as it may: 无论如何；尽管如此</li><li>merely: 仅仅</li><li>clear away: 收拾(餐具)</li><li>be content with: 满足于</li><li>run off: 逃跑；私奔；复印；喋喋不休</li><li>put up with: 忍受</li><li>wear out: 精疲力竭</li><li>undignified: 不体面的</li><li>conservatory: 音乐学院；温室</li><li>fern: 蕨类植物</li><li>genus: 属（生物分类的）</li><li>compromise: 降格；妥协</li><li>Holy Grail: 圣杯</li><li>speak out: 公开说出；求婚</li><li>see to: 照料；办理</li><li>slip away: 溜之大吉</li><li>slipped the hook: 滑钩</li><li>turn in: 睡觉;自首</li><li>graceless: 没有教养的</li><li>hollow out: 镂空</li><li>lump: 块；忍耐</li></ul><h3 id="表达方式">表达方式</h3><ul><li>None of them will be <code>up</code> for hours. 他们几个小时内都不会<code>起床</code>。</li><li>Is your fire still <code>in</code>? 火还<code>燃</code>着吧？</li><li>wonders will never <code>cease</code>. 奇迹总会出现。</li><li><code>blacking</code> the stove. <code>擦亮</code>炉子。</li><li>I want the dining room given a proper <code>going-over</code> today. 今天要把餐厅<code>彻底</code>打扫干净。</li><li>No rest for the wicked. 永无安宁(出自圣经，指恶人要永受折磨)</li><li>There are <code>bound to</code> be others. <code>肯定</code>还有别人。</li><li>When you think how excited Lucy Rothes was <code>at the prospect</code>. 你想想当时Lucy Rothes对去美国的<code>期待</code></li><li>Though he left it in <code>quite a state</code>. 虽然他走的时候留下了<code>一片狼藉</code>(quite a state主要表示状态非常不一般)</li><li><code>rotate</code> the summer and winter stuff. <code>轮流</code>放夏天和冬天的东西</li><li>I will <code>get the hang of</code> it. 我会记住的。(get the hang of… 指掌握…的窍门)</li><li>I can’t believe I’ve been <code>passed over for Long John Silver</code>. 不敢相信我居然<code>被一个跛脚海盗抢了职位</code>。</li><li>I‘m not entirely sure that he’ll <code>prove equal to</code> the task. 我不太确定他是不是能<code>胜任</code>这份工作。</li><li>We were all so <code>fond of</code> him. 我们都很<code>喜欢</code>他。</li><li>When my sister died, God rest her soul, I <code>ate my way through</code> four platefuls of sandwiches at one sitting and slept <code>round the clock</code>. 我姐姐走的时候 愿她安息 我<code>一口气吃了</code>四盘三明治，然后睡了整整<code>12 个小时</code>。</li><li>Your father <code>tied the knots pretty tight</code>. 你爸爸<code>把结打得非常死</code>。(指很难有别的方法。)</li><li>Don’t <code>catch me out</code>. 别<code>鸡蛋里挑骨头</code></li><li>Is it any wonder if the <code>others' noses are put out</code>? 也难怪别人会<code>说三道四</code>。</li><li>I wouldn’t <code>sleep a wink</code>. 我肯定<code>一宿睡不着</code>。</li><li>Let’s not gild the lily. 不要多此一举。</li><li>Don’t <code>stir</code> 别<code>搅混水</code>（别拱火）</li><li>But the honour of Downton is <code>at stake</code>. 但这是<code>赌上</code>唐顿名誉的</li><li>Don’t be such a <code>chatterbox</code>, Edith. 别这么<code>多嘴</code>，伊迪丝。</li><li>It’s an ill wind. 祸兮福所倚。（指因祸得福）</li><li>One swallow doesn’t make a summer. 孤燕不成夏(不要因为出现一件好事，就以为情况好转了。)</li></ul><h1>最后</h1><p>这篇除了学习时做的笔记，还介绍了我的学习方法和资料，之后的各篇我就直接只摆上学习笔记了。</p><p>[第7篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/">英语学习</category>
      
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      <category domain="http://raylei.space/tags/Downton-Abbey/">Downton Abbey</category>
      
      <category domain="http://raylei.space/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/">英语学习</category>
      
      
      <comments>http://raylei.space/2022/03/01/7-Downton_Abbey_S01E01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MS Office] 分割MS Access数据库为前端和后端</title>
      <link>http://raylei.space/2022/02/25/6-MSAccess_database_split/</link>
      <guid>http://raylei.space/2022/02/25/6-MSAccess_database_split/</guid>
      <pubDate>Fri, 25 Feb 2022 14:36:22 GMT</pubDate>
      
      <description>[第6篇]本篇介绍了为加强同事使用的Access数据库的同步性(synchronization)和可用性(availability)而使用的分割数据库前后端的方法。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>这篇文章会介绍<code>Access</code>的一些<code>基本知识</code>以及我在工作中通过<code>分割Access数据库为前后端</code>，从而帮助其他团队<code>提高工作效率</code>的方法。由于Access本身对数据库分割就有专门的功能支持，所以整个过程是<code>非常简单</code>的，在这里我只是介绍一下<code>流程</code>和<code>需要注意的点</code>。</p><h1>正文</h1><h2 id="背景介绍-3">背景介绍</h2><p>这篇文章其实源于我帮隔壁客户服务团队的一个小忙，他们团队有一个十人左右使用的小Access数据库来同步更新并记录客户电话来的一些信息，由于客户服务的<code>时效性</code>非常重要(<code>1.客户提供的信息最好马上能被其他同事访问 2.访问信息本身不应该花太多时间</code>)，但他们之前的操作是将一整个大概600M左右的数据库摆在共享文件夹中，每个同事要访问或修改数据信息时就<code>直接打开数据库</code>访问，如果有其他人正在访问那就只能等他们关闭后才能继续访问，而我们共享文件夹的服务器(我估计,因为全球同事都能访问特定共享文件夹)并不在香港本地，如果不是在澳大利亚至少也是在新加坡的地区办公室附近。因为本身在这么远的服务器上传输600M的文件就已经非常慢了，同时还不能保证文件的可用性，这导致他们之前做这部分工作几乎是非常困难的。</p><p>一次会议中我介绍我的另一个VBA自动工具之后(希望之后也有机会可以说一说这个)，他们的老板就问我可不可以解决他们的这个问题，我稍微查了一下资料就找到了这个MS Access支持的<code>分割数据库(split database)</code>的方法，现在看来应该是完美解决了他们的所有问题。</p><h2 id="Access基本知识">Access基本知识</h2><p>开始分割数据库前先复习一下MS Access的一些<a href="https://support.microsoft.com/en-us/office/database-basics-a849ac16-07c7-4a31-9948-3c8c94a7c204" title="Microsoft Access database Intro">基本知识</a>：</p><p>数据库是用来收集和管理信息的工具。本来信息也都可以储存在一般的列表或者电子表格中，但随着数据规模不断变大，用列表或表格管理的数据可能会出现各种各样的混乱且不利于提取需要的信息。如果数据达到了这种规模，普通的方式就已经不适用于这些数据的管理，这也是像Access这样的<code>数据管理系统(DBMS)</code>出现的原因。</p><p>一个数据库文件中可能有多种<code>对象(obJects)</code>，除了存储数据的<code>表(Table)</code>还有实现其他功能的<code>表单(Forms)</code>，<code>报表(Reports)</code>，<code>宏(Macros)</code>和<code>模块(Modules)</code>。这些对象在一个数据库文件中可能都不只有一个。创建格式在<code>Access 2007</code>之后的文件后缀为<code>.accdb</code>，在此之前的格式后缀都为<code>.mdb</code>，Access版本在2007之后的也可以用来创建<code>.mdb</code>格式的文件。</p><p>通过Access你可以实现这些功能：</p><ul><li>向数据库中添加新的数据</li><li>在数据库中编辑已有的数据</li><li>删除数据库中的数据</li><li>以不同的方式管理和查看数据</li><li>通过报表，邮件，内联网，互联网等方式将数据与他人共享</li></ul><h3 id="数据库物件">数据库物件</h3><h4 id="表-Tables">表(Tables)</h4><p>数据库的表看起来和电子表格一样，被用行列的形式存储，也因为这个好处，想要将电子表格数据导入数据库中是非常方便的。数据库表和电子表格的区别主要在与他们管理和储存数据的方式上。数据库表格中为了避免冗余，会将不同层面的信息分开为不同的表，比如一个电影票的数据库中可能有观影者信息，但每个观影者可能有多张电影票，这样如果每个电影票表中都存储同一个观影者信息就会导致冗余。这个过程被称为<code>标准化(normalization)</code>。</p><p>表中的每一行都是一条<code>记录(record)</code>,每一条记录都以不同<code>字段(fields)</code>的形式储存独立的信息，字段对应表中的列。比如有一条记录是关于某个观影者，那么字段可能包括他的姓，名，性别等。每一条记录代表了一个观影者在不同字段上的信息。</p><p>关于<code>表</code>的更多细节可以参考<a href="https://support.microsoft.com/en-us/office/introduction-to-tables-78ff21ea-2f76-4fb0-8af6-c318d1ee0ea7" title="Introduction to tables">这里</a>。</p><h4 id="表单-Forms">表单(Forms)</h4><p>表单是一个允许用户<code>输入</code>和<code>编辑数据</code>的用户界面。表单里面除了数据的展示，还会有一些带有<code>控制命令</code>的按钮。用户可以不使用表单而直接在表中<code>删增改</code>数据，但使用表单会让这个过程更加清晰方便。设计者可以通过<code>自定义命令按钮</code>来决定用户可以访问修改哪些数据，这也赋予了数据一定程度的安全性，来控制数据库使用者的权限。</p><p>关于表单的更多细节可以参考<a href="https://support.microsoft.com/en-us/office/introduction-to-forms-e8d47343-c937-44e8-a80f-b6a83a1fa3ae" title="Introduction to forms">这里</a>。</p><h4 id="报表-Reports">报表(Reports)</h4><p>报表是用户用来<code>整理总结</code>并<code>展示数据</code>的对象。一个报表的目的通常是某个具体的问题，比如“<code>我们今年在每部电影上的收入是多少</code>”等等，而报表可以让数据变得更加简单易读，用户可以通过报表得到这个设计好的问题在当前数据下的答案。</p><p>关于报表的更多细节可以参考<a href="https://support.microsoft.com/en-us/office/introduction-to-reports-in-access-e0869f59-7536-4d19-8e05-7158dcd3681c" title="Introduction to reports in Access">这里</a>。</p><h4 id="查询-Queries">查询(Queries)</h4><p>查询是所有数据库系统最核心的功能之一，它通过不同的函数<code>连接(JOIN)</code>不同数据库，<code>筛选(FILTER)</code>条件来获取数据库中符合特定条件的数据。查询通常有两种基本类型：<code>选择查询(select query)</code>和<code>动作查询(action query)</code>。前者可以用来获取数据，后者则是用来对数据进行特定操作，例如<code>增加新表，更新数据，删除数据</code>等。</p><p>关于查询的更多细节可以参考<a href="https://support.microsoft.com/en-us/office/introduction-to-queries-a9739a09-d3ff-4f36-8ac3-5760249fb65c" title="Introduction to queries">这里</a>。</p><h4 id="宏-Macros">宏(Macros)</h4><p>Access中的宏是一种用以给数据库<code>增加特定功能</code>的简单的<code>编程语言</code>。比如用户可以用宏编程一些可以完成提取特定数据或报表的按钮，用户点击按钮便会执行这些宏。这个主要用来将一些重复而复杂的人手工作自动化。</p><h4 id="模块-Modules">模块(Modules)</h4><p>与宏一样，模块是用来向数据库添加功能的对象。它们的区别在于宏中使用的方法是从宏操作列表中选择，而编写模块则是使用VBA编程语言进行编程。模块是作为一个单元存储在一起的<code>声明(declarations)</code>，<code>陈述(statements)</code>，和<code>过程(procedures)</code>的集合。</p><p>关于在Access中编程的细节都可以参考<a href="https://support.microsoft.com/en-us/office/introduction-to-access-programming-92eb616b-3204-4121-9277-70649e33be4f" title="Introduction to Access programming">这里</a></p><h2 id="操作流程">操作流程</h2><p>熟悉了Access的基本知识，现在我们可以意识到，其实一个Access数据库文件中真正存储数据信息的就只有<code>表(Table)</code>类型，所以我们分割数据库的理论基础就是，我们可以只把需要存储的信息(即表)放在共享网络上(作为<code>后端back-end</code>)，而需求信息的用户只需要使用链接在这些共享的表格上的其他类(作为<code>前端front-end</code>)既可以实时<code>有针对性地</code>访问需求的信息而不需要将整个数据库传输来传输去了。由于用户实际占用的只有他们各自的前端副本，且通过网络传输的只有被需求的一小股信息流(而不是整个数据库)，从而实现数据库的<code>可用性</code>和<code>实时性</code>。参考微软的<a href="https://support.microsoft.com/en-us/office/split-an-access-database-3015ad18-a3a1-4e9c-a7f3-51b1d73498cc" title="Office Support: Split an Access database">官方支持</a>，我接下来就介绍我实用的详细的分割数据库的流程。</p><h3 id="注意事项">注意事项</h3><p>开始之前有些需要注意的点：</p><ul><li>分割数据库前一定要<code>先备份数据</code>，很简单，直接复制一个副本放在一边，或者直接用副本分割。因为数据是非常宝贵的东西，在很多环境下可能一旦失去就是永远失去， 所以一点风险都不应该承担。</li><li>分割数据前要<code>提前通知用户</code>，否则分割时用户输入的数据可能不会被记录在分割后的数据库后端中。</li><li><code>确保用户电脑中的Access版本能够支持你分割后的数据库格式</code>，比如我在分割数据库的同时就帮他们把数据库格式从<code>mdb</code>升级成了<code>accdb</code>，因为公司的Access版本都是统一控制的，而文件格式本身就是向下兼容，没有必要不用功能更多性能更好的新版本格式。</li></ul><h3 id="分割数据库">分割数据库</h3><p>数据库分割的功能是Access自带的，只需要按照下方步骤即可完成：</p><ol><li><p>首先在你的本地电脑中复制一份已有的Access数据库文件，确保左边<code>All Access Objects</code>栏位中没有任何被隐藏的表，如果表被隐藏是不会被自动分割的。(不要问我为什么特别提这点，第一次分割数据库发现一部分数据无法同步，DEBUG好久最后发现原来是因为那部分数据的表被隐藏，导致分割数据库没有把这些表上传至共享文件夹)</p><p>在<code>All Access Objects(所有Access对象)</code>选项上右键，选择<code>Navigation Options(导航选项)</code>，这时会打开一个对话框，将<code>Show Hidden Objects(显示隐藏对象)</code>打勾并且确定。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301124556871.png" alt="打开导航选项"></p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301124707290.png" alt="勾选显示隐藏对象并确认"></p><p>这时回到<code>All Access Objects栏</code>中，如果文件中有被隐藏的对象，会看到他们现在呈半透明色，右键点击他们按<code>Unhide in this Group(该组中取消隐藏)</code>即可解除隐藏。确保你要分割的文件中没有隐藏的表。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301124841322.png" alt="image-20220301124841322"></p></li><li><p>分割数据库本身就非常简单了，只需要在<code>Database Tools(数据库工具)</code>选项卡上的<code>Move Data(移动数据)</code>组中，点击<code>Access Database(Access数据库)</code>，就会出现图中这个<code>Database Splitter(数据库分割向导)</code>。现在点击<code>Split Database(分割数据库)</code>按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125110106.png" alt="image-20220301125110106"></p></li><li><p>单击<code>Split Database(分割数据库)</code>按钮后就会出现浏览文件路径的对话框，这里就是设定<code>后端</code>的所在地的地方，我们选择到我们已经准备好的共享文件夹中，确保需要使用这个数据库的用户都可以访问这个共享文件夹。数据库名称和文件类型都可以改，但没有必要(<code>除非有特别的理由</code>，否则只有坏处没有好处)。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125246928.png" alt="image-20220301125246928"></p></li><li><p>设置完成后点击<code>Split(分割)</code>Access就会开始自动分割数据库了，原数据库中的<code>表</code>都会被复制到刚刚设定的<code>后端文件</code>中，而这时我们进行这些操作的文件就是<code>前端文件</code>了，<code>表以外的其他对象</code>就都在前端文件中了，前后端是通过网络绑定连接在一起的。数据库分割完成后会弹出<code>分割成功</code>的提示消息。</p></li><li><p>这里加一点是微软的<code>官方教程没有提到</code>的，那就是前后端分割完成后还需要点击<code>Database Tools(数据库工具)</code>选项卡上的<code>Tools(工具)</code>组中的<code>Compact and Repair Database(压缩和修复数据库)</code>，否则前端数据库的大小可能跟分割前一样大。按照微软的说法，这是因为Access的运作方式中即使删除对象，它也不会立即将该对象曾经占用的硬盘空间释放。如果你对数据库中删改的需求很多量也很大的话，你也可以设置自动压缩和修复数据库，方法<a href="https://support.microsoft.com/en-us/office/compact-and-repair-a-database-6ee60f16-aed0-40ac-bf22-85fa9f4005b2" title="Compact and repair a database">参考这里</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125322541.png" alt="image-20220301125322541"></p></li><li><p>最后，为了限制使用者对前后端数据的更改权限，我们把刚刚的前端文件(<code>.accdb格式</code>)保存为已编译的二进制文件(<code>.accde</code>)，既将前端中可以设计更改数据库逻辑的源代码编译保存，这样二进制文件的用户可以照常使用前端需求数据，但无法对他的功能和设计做改变。具体来说只需要在前端文件中点击<code>Save as(另存为)</code>然后按下图中选择并保存在希望的位置即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125353890.png" alt="image-20220301125353890"></p></li><li><p>这时候我们已经把后端的数据库放在了共享文件夹中，并且已经有了一个可以连接后端数据库的前端文件，剩下的我们只需要把这些前端文件分发给我们的数据库用户就可以了，通过电子邮件，U盘，或者共享文件夹都可以，用户只要保存一份前端文件的副本在自己的本地硬盘中，确保他们可以通过网络访问共享文件夹，那么他们就可以像以前一样使用表以外的Access的数据提取展示等功能了。</p><h3 id="更改后端数据库">更改后端数据库</h3><p>如果想要更改后端数据库，或者是想把后端数据库的保存位置更改，<code>仅仅只复制粘贴是不行的</code>，因为前端中的连接还是在原来的后端数据库的位置。</p><p>以移动后端数据库的位置为例，假设后端数据库中的表结构和名字都不需要变化，那么要做的就很简单：</p><p><code>首先</code>把后端数据库复制并粘贴到你想要的新位置，<code>然后</code>如图所示点击<code>External Data(外部数据)</code>选项卡上<code>Import&amp;Link(导入和连接)</code>组中的<code>Linked Table Manager(链接表管理器)</code>。在<code>链接表管理器</code>中你可以分别连接当前前端数据库绑定的每一个表的位置，在我们的情况中我们只需要<code>Select All(选择全部)</code>然后点击上方<code>Relink(重新连接)</code>，然后选择到你新复制到的后端数据库位置。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125452427.png" alt="image-20220301125452427"></p><p>点击确定之后会有一个弹窗，如果你新的后端数据库没有做任何更改，那么这里<code>不要点Yes</code>。点<code>No</code>它就会开始自动帮你把所有的连接从旧的位置一张表一张表地连接到新位置的每一张同名表上，但如果你点了Yes，它会要求你每一张表给他提供新的名字，除非你真的有表名字的变化否则<code>千万别按错了</code>，不然会浪费很多时间。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220301125530871.png" alt="image-20220301125530871"></p><h1>最后</h1><p>通过这一次帮助其他团队解决效率问题，我复习并且更加了解了MS Access的一些基本功能和结构，同时知道了中小型团队在共享数据时可以使用Access来解决数据库<code>同步性(synchronization)</code>和<code>可用性(availability)</code>问题的解决方案。</p><p>[第6篇]</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/MS-Office/">MS Office</category>
      
      
      <category domain="http://raylei.space/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/">工作学习</category>
      
      <category domain="http://raylei.space/tags/Access/">Access</category>
      
      
      <comments>http://raylei.space/2022/02/25/6-MSAccess_database_split/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[编程算法] 到底什么是“面向对象编程(OOP)”</title>
      <link>http://raylei.space/2022/02/23/5-What_is_object_oriented_programming/</link>
      <guid>http://raylei.space/2022/02/23/5-What_is_object_oriented_programming/</guid>
      <pubDate>Wed, 23 Feb 2022 15:47:32 GMT</pubDate>
      
      <description>[第5篇]本篇介绍了对程序员来说一定要知道的最基础的知识，什么是“面向对象编程(OOP)”什么是“面向过程编程(POP)”。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>本篇介绍了对“程序员”来说很可能是第一个难点ever，但又绝不能不知道的<code>面向对象编程(Object Oriented Programming)</code>和<code>面向过程编程(Procedural Oriented Programming)</code>，由于我自己本科学的是金融数学，二硕学个计算机吧又是金融计算方向(选课偏向<code>数据分析</code>而非<code>软件开发</code>)，因此基本上在编程的时候使用的都只是简单易懂的<code>“面向过程编程”</code>的方法，因此本篇我就要好好研究一下到底什么叫<code>“面向对象编程”</code>。</p><h1>正文</h1><h2 id="背景介绍">背景介绍</h2><p>在写上一篇博文的时候，我把<a href="https://selenium-python.readthedocs.io/index.html" title="SeleniumwithPython">Selenium with Python</a>的文档看了一遍，看着看着忽然觉得有些吃力，这才想起来我有一个东西一直都是半懂不懂，那就是传说中所谓的<code>面向对象编程(Object Oriented Programming)</code>和<code>面向过程编程(Procedural Oriented Programming)</code>。这导致我在看别人代码的时候总是没有那种融汇贯通心领神会的感觉，作为“<code>1/4”</code>个计算机<code>“科班出生”</code>的<code>“1/4程序员”</code>这怎么行？所以我今天就要把这个东西彻底啃透。</p><h2 id="概述">概述</h2><p>根据这篇<a href="https://zhuanlan.zhihu.com/p/75265007" title="2分钟让你明白什么是面向对象编程">知乎文章</a>的解释，<code>面向过程</code>与<code>面向对象</code>这两种编程方式拥有各自的优缺点。通俗一点解释就是**：**</p><ul><li><p><strong>面向过程：</strong> 顾名思义，编程方式注重过程。在解决一个问题的时候这种编程方式需要把解决方式拆分成一个个过程，按照一定的顺序执行完这些方法(methods)，方法执行完问题就解决了。</p></li><li><p>**面向对象：**同样名字就已经非常清晰了，注重的是程序互动的对象。解决问题的时候面向对象编程是将事物抽象成对象，那问题里可能涉及的事物都定义成一个程序对象，然后给这个对象赋上一些<code>属性(Properties)</code>和<code>方法(methods)</code>。让各个对象去执行自己的方法以此来解决问题。</p></li></ul><h3 id="举例说明">举例说明</h3><p>我引用<a href="https://zhuanlan.zhihu.com/p/75265007" title="2分钟让你明白什么是面向对象编程">呜呜轩轩</a>提到的我觉得对于我的理解起到重要帮助的两个例子，分别是洗衣服和做饭。</p><h4 id="洗衣服">洗衣服</h4><p>假设有一个问题：要用洗衣机洗干净脏衣服，如何执行？</p><p><strong><code>面向过程</code>的解决方法</strong>：</p><ol><li>执行加洗衣粉的方法；</li><li>执行加水的方法；</li><li>执行洗衣服的方法；</li><li>执行清洗的方法；</li><li>执行烘干的方法；</li></ol><p>将解决过程拆分成一个个方法，不用调用对象，通过执行一个个方法来解决问题。</p><p><strong><code>面向对象</code>的解决方法：</strong></p><ol><li>先抽象出两个对象，分别是<code>洗衣机</code>和<code>人</code></li><li>针对对象<code>洗衣机</code>加入一些属性和方法：“洗衣服方法”，”清洗方法“，”烘干方法“</li><li>针对对象<code>人</code>加入一些属性和方法：“加洗衣粉方法”，“加水方法”</li><li>然后执行：<code>人.加洗衣粉→人.加水→洗衣机.洗衣服→洗衣机.清洗→洗衣机.烘干</code></li></ol><p>同一个问题，面向对象编程需要先定义对象然后靠对象执行方法的方式解决问题。</p><h4 id="做饭">做饭</h4><p>呜呜轩轩引用了@十四期_李光的说法，分别将<code>面向过程编程</code>和<code>面向对象编程</code>比喻成<code>蛋炒饭</code>和<code>盖浇饭</code>。以此来说明两种方法的优缺点：</p><ul><li><code>面向过程编程就像蛋炒饭</code>，食材和饭交融在一起，难以分开，其味道可能均匀易于入口，但一旦做好就很难再改变。</li><li><code>面向对象编程就像盖浇饭</code>，食材和饭是分开的，食客在同时能享受到食材和饭的同时，如果想要换一个口味也只需要将不同的菜与之前的饭放在一起就可以了。</li></ul><p>回到现实，这两种方法各自的优缺点就是：</p><ul><li>面向过程编程性能高于面向对象编程，缺点是不易维护，难以扩展，难以复用。适合需要性能优先的场景。</li><li>面向对象编程就是相反了，性能略低但易维护易扩展，结构更加灵活。适合大而复杂的软件开发。</li></ul><p>这两个例子一个让人了解这两种方法在表达形式上的区别，一个让人了解各自的优缺点，我觉得非常方便概念比较模糊的人理解。</p><h2 id="面向对象编程">面向对象编程</h2><p>我个人觉得<code>面向过程编程</code>是非常<code>straightforward</code>的，所以除了两者的对比以外，我不打算细说面向过程编程。那在这一节我就还是用我从网上学到的内容(主要还是<a href="https://zhuanlan.zhihu.com/p/75265007" title="2分钟让你明白什么是面向对象编程">呜呜轩轩</a>和<a href="https://www.udacity.com/blog/2021/11/__init__-in-python-an-overview.html" title="__init__ in Python: An Overview">Alexey</a>)现学现卖，详细讲讲面向对象编程的三大特征和五大原则，以及其实际的实现方法等。</p><h3 id="三大基本特征">三大基本特征</h3><p>**封装(Encapsulation)：**把客观事物封装成抽象的<code>类(Class)</code>，而类可以把自己的<code>属性(Property)</code>和<code>方法(methods)</code>只让可信的类或者对象操作，对不可信的进行信息隐藏(public和private)。一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。</p><p>**继承(Inheritance)：**让某个类型的对象获得另一个类型对象的属性的方法。继承使新类可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展，通过继承创建的新类称为<code>“子类(Subclass)”</code>或<code>“派生类(Derived class)”</code>，被继承的类称为<code>“基类(Base class)”</code>，<code>“父类(Parent class)”</code>或<code>“超类(Super class)”</code>。继承的过程就是从<code>一般(generalized)</code>到<code>特殊(specialized)</code>的过程。要实现继承，可以通过<code>“继承(Inheritance)”</code>和<code>“组合(Composition)”</code>来实现。继承概念的实现方式有两类：<code>实现继承(Implementation inheritance)</code>与<code>接口继承(Interface inheritance)</code>。前者指直接使用父类的属性和方法而无需额外编码的能力；后者则是指仅使用属性和方法的名称，但子类必须提供实现的能力。</p><p>**多态(Polymorphism)：**指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着虽然针对不同对象的具体操作不同，但通过一个公共的类，它们可以通过相同的方式予以调用。</p><h3 id="五大基本原则">五大基本原则</h3><p>**单一职责原则SRP(Single Responsibility Principle)：**指一个类的功能要单一，不能混杂什么都有。</p><p>**开放封闭原则OCP(Open－Close Principle)：**一个模块在扩展性方面应该是开放的，而在更改性方面应该是封闭的。比如：一个网络模块，原来只有服务端功能，在现在要加入客户端功能，那么就应该在不用修改已有功能代码的前提下就能增加客户端的实现代码，这要求在设计之初就将两个部分分开，将公共部分抽象出来。</p><p>**里式替换原则LSP(the Liskov Substitution Principle LSP)：**子类应当可以替换父类并出现在父类能出现的任何地方。</p><p>**依赖倒置原则DIP(the Dependency Inversion Principle DIP)：**程序要依赖于抽象接口而不能依赖于具体实现。假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类，因为如果这样做的话任何一个下层模块的变动都会导致上层必须要被相应更改。正确做法应当由B定义一个抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。</p><p>**接口分离原则ISP(the Interface Segregation Principle ISP)：**模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来。</p><h3 id="Python中的面向对象编程">Python中的面向对象编程</h3><h4 id="Python中的类-Class">Python中的类(Class)</h4><p>一个<code>类(Class)</code>会定义所有以它创建的对象，你甚至可以把类想象成一个对象工厂。举例来说，假设你有一只<code>牛头梗</code>，从<code>面向对象编程</code>的角度来看，一个<code>狗</code>的类中可能包含狗的一些特征，比如他的品种，眼色等。由于牛头梗是一只狗，那么我们就可以创建一个继承<code>狗</code>这个<code>类</code>特征的对象来定义牛头梗。<code>类</code>使用<code>方法函数(methods)</code>和<code>构造函数(constructors)</code>来创建并定义<code>对象(Objects)</code>。</p><h4 id="用户定义的方法-user-defined-methods-和特殊方法-special-methods">用户定义的方法(user-defined methods)和特殊方法(special methods)</h4><p><code>方法(methods)</code>是类中用以执行特殊任务的函数，Python将方法分成程序员编写的<code>用户定义方法(user-defined method)</code>和语言中自带的<code>特殊方法(special method)</code>。比如一个叫<code>狗</code>的<code>类</code>中可能有一个方法叫做<code>walk()</code>来供<code>狗</code>的对象调用，程序员编写这个方法来执行特殊的动作。</p><p>而<code>特殊方法</code>则被<code>双下划线(__)</code>包围的名字定义，比如说<code>__init__</code>。Python用这些特殊方法来加强类的功能性，其大多在后台工作并会在程序需要的时候被自动调用。程序员不能直接调用这些方法。举例来说，当你创建一个新的对象的时候，Python会自动调用<code>__new__</code>方法，而这又会调用<code>__init__</code>方法。</p><h4 id="构造函数-constructor">构造函数(constructor)</h4><p>构造函数是程序在创建对象时会调用的特殊方法，其在类中是被用来初始化对象数据的。以<code>狗</code>这个类举例，我们可以用这个类的构造函数去给每一个<code>牛头梗</code>对象特征赋值，<code>__init__</code>就是Python的构造函数。</p><h4 id="用代码来解释">用代码来解释</h4><p>我们首先创建一个类，并且在这个类中定义一个<code>__init__</code>方法，而这个方法则初始化两个<code>属性(attribute)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:                   </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,dogBreed,dogEyeColor</span>):</span><br><span class="line">  </span><br><span class="line">    self.breed = dogBreed       </span><br><span class="line">    self.eyeColor = dogEyeColor...</span><br></pre></td></tr></table></figure><p>这时我们已经有了一个<code>类</code>了，接下来我们以这个类创建<code>对象</code>，并且将<code>类</code>中的<code>属性</code>传递给这个<code>对象</code>。这时候我们就需要<mark class="hl-label red">self</mark> 这个magic word来将对象的属性绑定在其接收到的参数上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...Tomita = Dog(<span class="string">&quot;Fox Terrier&quot;</span>,<span class="string">&quot;brown&quot;</span>)...</span><br></pre></td></tr></table></figure><p>在上面这行代码中，我们创建了一个叫做<code>Tomita</code>的对象(这是这只狗的名字)，然后我们首先声明定义这个对象的类的名字(<code>Dog</code>)，然后将在<code>Dog类</code>的<code>__init__</code>中设定的两个属性分别设定为<code>Fox Terrier</code>和<code>brown</code>。然后<code>__init__</code>用<code>self</code>来将这两个以参数传回的值赋给对象的属性<code>self.breed</code>和<code>self.eteColor</code>。</p><p>然后要访问我们创建的对象的属性，我们只需要在对象名后用<code>.</code>接上相应的属性名，就可以访问这个对象的这个属性的值，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="built_in">print</span>(<span class="string">&quot;This dog is a&quot;</span>,tomita.breed,<span class="string">&quot;and its eyes are&quot;</span>,tomita.eyeColor)</span><br></pre></td></tr></table></figure><p>我们运行上面这段代码会得到这样的结果：</p><blockquote><p>This dog is a Fox Terrier and its eyes are brown</p></blockquote><p>Python中的构造函数也可以不输入参数，可以使用默认参数设定。如果一个构造函数不是必须输入参数的话，这个构造函数就叫<code>默认构造函数(default constructor)</code>。比如上面的<code>Dog类</code>如果写成默认构造函数形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:                </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dogBreed=<span class="string">&quot;German Shepherd&quot;</span>,dogEyeColor=<span class="string">&quot;Brown&quot;</span></span>): </span><br><span class="line">  </span><br><span class="line">    self.breed = dogBreed   </span><br><span class="line">    self.eyeColor = dogEyeColor</span><br></pre></td></tr></table></figure><p>可以注意到<code>__init__</code>中规定了两个参数的默认值<code>dogBreed</code>为<code>German Shepherd</code>而<code>dogEyeColor</code>为<code>Brown</code>，这时如果我们以<code>tomita = Dog()</code>这样不传递任何参数的方式创建对象，那么这个对象的属性就会被设定成默认的<code>German Shepherd</code>和<code>Brown</code>。</p><h1>最后</h1><p>通过这篇文章，我们首先理清楚了<code>面向过程编程</code>和<code>面向对象编程</code>二者的关系以及各自的利弊，前半部分实际适用于所有的编程语言，之后我们重点关注Python中面向对象编程的方式，并举例来说明一些比较难以理解的参数和设定(比如<code>__init__</code>和<code>slef</code>等)，搞懂了这些基础知识终于可以看懂一些大佬的代码到底在干什么了。</p><p>[第5篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/">编程算法</category>
      
      
      <category domain="http://raylei.space/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/">日常学习</category>
      
      <category domain="http://raylei.space/tags/Python/">Python</category>
      
      
      <comments>http://raylei.space/2022/02/23/5-What_is_object_oriented_programming/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[编程算法] 公司项目需要的自动化测试Selenium文档解读</title>
      <link>http://raylei.space/2022/02/21/4-Selenium_documentation_learning/</link>
      <guid>http://raylei.space/2022/02/21/4-Selenium_documentation_learning/</guid>
      <pubDate>Mon, 21 Feb 2022 10:22:00 GMT</pubDate>
      
      <description>[第4篇]本篇文章主要介绍了在公司项目中用Selenium做自动化测试的方法。</description>
      
      
      
      <content:encoded><![CDATA[<h1>序言</h1><p>基于刚进公司时接手的一个<code>自然语言处理</code>+<code>自动化测试</code>的项目，这篇文章我会主要覆盖Python的Selenium包的文档解读，由于在HKU时的毕业项目便涉及各种在线论坛的评论爬取，我对Selenium并不算陌生，但由于Selenium的内容功能是比较多的，本篇除了一些基础知识以外，我会重点关注与公司项目有关的部分。</p><h1>正文</h1><h2 id="背景介绍-2">背景介绍</h2><p>刚进公司的时候接手了一个前人的<code>自然语言处理</code>+<code>自动测试</code>项目。因为现在公司有一个由集团设定报价逻辑的报价系统，通常来说由代理或核保人员输入客户的相关资料便可以完成报价，但这个系统报价汽车险时要输入的资料非常繁琐，导致代理不愿意使用这个系统报价，影响报价率。考虑到这个系统中很多资料是没有意义的，因此前人建议代理直接填写车型排量司机年龄等必要资料，并用Python做了一个自动报价工具。</p><p>这个工具由两个大部分组成，第一个部分是自然语言处理，即使用<code>Cosine Similarity</code>算法将代理输入的车型信息与公司系统中的车型信息匹配，有机会我会再写一篇文章讲讲这部分。第二部分则是自动化测试，使用匹配到的车型信息利用Selenium自动填写资料并返回报价。前人对第一个部分的完成度是比较高的，因此我只是对代码<code>规范性</code>和<code>循环逻辑</code>稍作调整便可以获得较好的<code>文本匹配和稳定性</code>。但第二个部分他的测试显然是不够的（毕竟是未完成的项目），网站中有非常多的特殊情况例如某些资料未填写时其他资料将不会显示，司机年龄和驾龄都很小时会直接弹出错误信息不予报价，有时网站弹窗提示时需要先将该弹窗关闭才能继续操作等等。</p><p><strong>但由于代码本身涉及公司内部报价网站的架构，我<code>不会</code>在这里分享具体的代码或逻辑，因此本篇我会分享一些我在解决这些问题时通过<a href="https://selenium-python.readthedocs.io/index.html" title="Selenium with Python">Selenium with Python</a>学习到的知识。</strong></p><h2 id="Selenium文档解读">Selenium文档解读</h2><p>在开始之前，我想先通过<a href="https://stackoverflow.com/questions/54459701/what-is-selenium-and-what-is-webdriver" title="What is selenium and what is webdriver">这个问题</a>下大佬们的回答介绍一下<code>Selenium</code>和<code>Webdriver</code>是什么。<code>Selenium</code>是一个适用于各种浏览器和平台的网页应用的<code>自动测试套装</code>，各个主要的浏览器提供商都已将<code>Selenium</code>作为其浏览器内部部分进行支持，而我使用的则是<code>Selenium</code>为<code>Python</code>接入提供的一个包。而<code>Webdriver</code>则顾名思义是一个连接你的脚本和浏览器的一个程序，其通过在浏览器中注入<code>Javascript</code>的方式来控制浏览器行为，你可以想象你通过你的Python脚本告诉这个<code>“司机”(driver)</code>如何开这个<code>&quot;车&quot;(browser)</code>。</p><h3 id="基本约定">基本约定</h3><p>在介绍具体的函数之前，首先介绍一下Selenium API的一个基本约定。Selenium API 有一些属性(Attribute)是可调用的(即方式methods)，有一些属性是不可调用的(即特性properties)，所有可调用的属性都以圆括号结尾。如下例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.current_url <span class="comment">#这是一个property,是一个值。具体来说是&quot;现在这个页面的URL&quot;。</span></span><br><span class="line">driver.close()<span class="comment">#这是一个method，是一个动作。具体来说是&quot;关闭当前窗口&quot;。</span></span><br></pre></td></tr></table></figure><h3 id="打开网页">打开网页</h3><p>举例来说，当使用<code>webdriver.Chrome()</code>将<code>Chrome driver</code>设定为<code>实例(instance)</code>并将该实例赋值给<code>driver</code>时，使用<code>driver.get(“xx网址URL”)</code>，浏览器便会被打开并导航至该指定网址，需要注意的是<code>Webdriver</code>会等到网页完全加载完毕之后才将控制权返回你的脚本，也就是说在这个阶段你通常不用担心你的程序会急着在没有加载出来的网页中操作或找寻你要的东西，但如果网页使用了大量的<code>AJAX(Asynchronous JavaScript And XML</code>, 用于直接在已加载的网页中读取网络服务器数据)，那么driver可能无法判断网页是否完全加载，如果要确保网页完全加载可能需要使用selenium的<a href="#%E7%AD%89%E5%BE%85%E5%8A%A0%E8%BD%BD(Waits)">waits</a>函数。</p><h3 id="定位元素">定位元素</h3><p>当我们进入了想要测试的网页之后，首先要解决的问题就是如何让driver找到你想要互动的元素，Selenium提供的方式非常丰富，包括<code>id, name, Xpath, link text, partial link text, tag name, class name甚至css selector</code>。</p><h4 id="举例说明-2">举例说明</h4><p>举例来说，如果我们有一个如下的网页：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;continue&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;continue&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clear&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span> Are you sure you want to do this?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;continue.html&quot;</span>&gt;</span>Continue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cancel.html&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么你可以分别通过下面这些方式定位你想要的各个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">login_form = driver.find_element_by_id(<span class="string">&#x27;loginForm&#x27;</span>) <span class="comment"># 通过id定位到表格</span></span><br><span class="line">username = driver.find_element_by_name(<span class="string">&#x27;username&#x27;</span>) <span class="comment"># 获得第一个name是“username”的元素</span></span><br><span class="line">username = driver.find_element_by_xpath(<span class="string">&quot;//form[input/@name=&#x27;username&#x27;]&quot;</span>) <span class="comment"># 第一个有子input元素名字是&#x27;username&#x27;的表格中的这个input元素</span></span><br><span class="line">continue_link = driver.find_element_by_link_text(<span class="string">&#x27;Continue&#x27;</span>) <span class="comment"># 第一个描述是&#x27;Continue&#x27;的链接</span></span><br><span class="line">continue_link = driver.find_element_by_partial_link_text(<span class="string">&#x27;Conti&#x27;</span>) <span class="comment"># 第一个描述包含&#x27;Conti&#x27;的链接</span></span><br><span class="line">p_element = driver.find_element_by_tag_name(<span class="string">&#x27;p&#x27;</span>) <span class="comment"># 第一个tag是p的元素</span></span><br><span class="line">content = driver.find_element_by_class_name(<span class="string">&#x27;content&#x27;</span>) <span class="comment"># 第一个class名是&#x27;content&#x27;的元素</span></span><br><span class="line">content = find_element_by_css_selector(<span class="string">&#x27;p.content&#x27;</span>) <span class="comment"># 第一个css selector符合给定条件的元素</span></span><br></pre></td></tr></table></figure><p>上面这些<code>find_element_by_*</code>的方式都只能用于找到页面中<code>第一个</code>出现的<code>符合条件</code>的元素，而如果把方式换成相应的<code>find_elements_by_*</code>那么它将以list的形式返回页面中符合条件的所有元素(但<strong>注意<mark class="hl-label red">没有</mark>  <code>find_elements_by_id</code></strong>, 因为一个html文件中<code>id只能是唯一</code>的)。</p><p>另外除了以上这些<code>public methods</code>以外，<code>Selenium</code>还提供了两个<code>private methods</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//button[text()=&quot;Some text&quot;]&#x27;</span>)</span><br><span class="line">driver.find_elements(By.XPATH, <span class="string">&#x27;//button&#x27;</span>)</span><br><span class="line"><span class="comment">## 除了By.XPATH外，像private methods也同样有By.ID, By.LINK_TEXT, By.PARTIAL_LINK_TEXT, By.NAME, By.TAG_NAME, By.CLASS_NAME, By.SELECTOR这些参数可以选择。</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这两种方式并没有本质区别，因为<code>find_element_by_*</code>就是以<code>find_element</code>定义的，<a href="https://stackoverflow.com/questions/51035651/difference-between-public-and-private-selector-methods" title="Difference Between Public and Private Selector Methods">参考这里</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_element_by_xpath</span>(<span class="params">self, xpath</span>):</span><br><span class="line">    <span class="keyword">return</span> self.find_element(by=By.XPATH, value=xpath)</span><br></pre></td></tr></table></figure><h4 id="更多关于XPath">更多关于XPath</h4><p>XPath通常来说是用得最多的定位元素的方式。XPath本身是一个专门用来定位XML文件中<code>节点(nodes)</code>的语言，由于<code>HTML</code>也可以由<code>XML</code>实现(<code>XHTML</code>), 这也使得Selenium用户可以用这个强大的语言来定位网页元素。XPath之所以用得比较多是因为理论上它可以定位到网页中的任何一个元素，无论它有没有被用<code>id</code>或<code>name</code>定义过。</p><p>XPath在selenium中使用也可以有两种方式，<code>绝对引用</code>或<code>相对引用</code>：</p><ul><li><code>绝对引用(不推荐)</code>：绝对引用的路径是从<code>root(html)</code>层开始往后推，虽然绝对引用可能可以更精确定位到想要引用的元素，但它的缺点却在于网页文件的一点点变动都会导致引用不正确。</li><li><code>相对引用</code>：相对引用是定位目标元素到它附近的(最好是母元素)有<code>id</code>或<code>name</code>属性的元素的相对路径，虽然有几率错过真正想找的元素(比如有两个<code>name</code>相同的元素)，但引用相对页面变动也更加稳定。</li></ul><p>举例来说，在上面这个[网页][#举例说明]中,我们可以使用很多不同的XPath来定位同一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">login_form = driver.find_element_by_xpath(<span class="string">&quot;/html/body/form[1]&quot;</span>) <span class="comment"># 绝对引用定位form</span></span><br><span class="line">login_form = driver.find_element_by_xpath(<span class="string">&quot;//form[1]&quot;</span>) <span class="comment"># 文件中第一个form</span></span><br><span class="line">login_form = driver.find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;loginForm&#x27;]&quot;</span>) <span class="comment"># id是&quot;loginForm&quot;的form</span></span><br><span class="line">username = driver.find_element_by_xpath(<span class="string">&quot;//form[input/@name=&#x27;username&#x27;]&quot;</span>) <span class="comment"># 第一个form里面有name为“username”的input子元素</span></span><br><span class="line">username = driver.find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;loginForm&#x27;]/input[1]&quot;</span>) <span class="comment"># id是&quot;loginForm&quot;的form元素里的第一个input元素</span></span><br><span class="line">username = driver.find_element_by_xpath(<span class="string">&quot;//input[@name=&#x27;username&#x27;]&quot;</span>) <span class="comment"># 第一个name是&quot;username&quot;的input元素</span></span><br><span class="line">clear_button = driver.find_element_by_xpath(<span class="string">&quot;//input[@name=&#x27;continue&#x27;][@type=&#x27;button&#x27;]&quot;</span>) <span class="comment">#第一个name是&quot;continue&quot;且type是&quot;button&quot;的input元素</span></span><br></pre></td></tr></table></figure><p><a href="https://www.w3schools.com/xml/xpath_intro.asp" title="W3School XPath Tutorial">W3School</a>有更细致更全面的XPath有关的教程。</p><h3 id="等待加载-Waits">等待加载(Waits)</h3><p>自动测试项目中非常影响实际测试效果的一个因素就是这个部分了。Waits顾名思义就是让程序等待，Python的time包中有一个<code>sleep()</code>函数就可以做到这点，让程序暂停执行一段设定的时间。那么Selenium中的<code>·</code>有什么不同呢？<code>time.sleep()</code>是没有任何其他条件地让程序暂停一段时间，但Selenium中的<code>waits</code>却是令程序在某个条件被达成之前等一段设定的时间。换言之<code>一旦条件达成便立即执行</code>。Selenium有两种waits。</p><h4 id="显式等待-Explicit-waits">显式等待(Explicit waits)</h4><p>使用显示等待会让程序在<code>给定条件</code>出现以前等待一段时间，超过这段时间或达成条件才进行下一步操作。默认设定下，程序会每隔<code>500毫秒</code>判断一次条件是否达成。以这段代码为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">&quot;myDynamicElement&quot;</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p><code>expected_condition</code>是<code>selenium</code>预设的一些判断条件的函数，代码中的<code>EC.presence_of_element_located()</code>接受<code>locator</code>参数，而<code>locator</code>则是一个<code>(by, path)</code>的<code>元组(Tuple)</code>，这也是这里有两层括号的原因。当这个元素可以被定位后该函数会返回一个<code>true</code>(Boolean), 如果无法被定位这个函数则会返回<code>not null</code>。(<a href="https://www.selenium.dev/selenium/docs/api/py/_modules/selenium/webdriver/support/expected_conditions.html#visibility_of_element_located" title="Source code for selenium.webdriver.support.expected_conditions">参考这里</a>)</p><p><code>expected_condition</code>提供的预设好的网页条件还有以下这些：</p><ul><li>title_is</li><li>title_contains</li><li>presence_of_element_located</li><li>visibility_of_element_located</li><li>visibility_of</li><li>presence_of_all_elements_located</li><li>text_to_be_present_in_element</li><li>text_to_be_present_in_element_value</li><li>frame_to_be_available_and_switch_to_it</li><li>invisibility_of_element_located</li><li>element_to_be_clickable</li><li>staleness_of</li><li>element_to_be_selected</li><li>element_located_to_be_selected</li><li>element_selection_state_to_be</li><li>element_located_selection_state_to_be</li><li>alert_is_present</li></ul><p>如果这些预设好的条件无法满足你的需求，你还可以自己<code>定义等待条件</code>，参考<a href="https://selenium-python.readthedocs.io/waits.html" title="Selenium with Python (Waits)">文档</a>中的方法。</p><h5 id="一些容易有疑问的条件">一些容易有疑问的条件</h5><p>上面这些预设的等待条件中有几个<code>非常相似</code>的条件，我特别拎出来讲一讲他们的区别：</p><ul><li>presence_of_element_located：只要元素在文件物件模型(DOM)<code>出现</code>便会返回true。</li><li>visibility_of_element_located：元素在DOM中<code>出现并且高度和宽度大于0 (visible)</code> 才会返回true。</li><li>element_to_be_clickable：元素需要<code>出现，可见并且可以互动</code>才会返回true。</li></ul><p>显然越下面的条件比上面越加严苛，如果你想让你的脚本按一个<code>button</code>，那么比起它的出现或者可见，你更应该关心它是不是已经<code>可以被按</code>了。其他的条件的具体解释也都可以参考<a href="https://www.selenium.dev/selenium/docs/api/py/_modules/selenium/webdriver/support/expected_conditions.html#visibility_of_element_located" title="Source code for selenium.webdriver.support.expected_conditions">源代码</a>中的写法和注释。</p><h4 id="隐式等待-Implicit-waits">隐式等待(Implicit waits)</h4><p>隐式等待比显式等待在写代码的层面上更加简单，针对性也没有那么强。它只是让driver不能立马在DOM中定位到某项元素时，多等一段设定好的时间。隐式等待时间的默认设置为0，在一次<code>Webdriver</code>的使用中它只需要被<code>设定一次</code>。使用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></span><br><span class="line">driver.get(<span class="string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)</span><br><span class="line">myDynamicElement = driver.find_element_by_id(<span class="string">&quot;myDynamicElement&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="操作元素">操作元素</h3><p>Selenium中可以用来操作元素的方式实在是太丰富了，我在这篇中只会提到我项目中会使用到的，也是最简单最基础的几个操作方法。</p><h4 id="点击元素">点击元素</h4><p>非常直观，在你找到的元素后面调用<code>.click()</code>方式，便可以让driver尝试点击这个元素。</p><h4 id="填写输入">填写输入</h4><p>当你定位到一个可以<code>input</code>的元素之后，可以使用<code>send_keys(&quot;whatevertext&quot;)</code>来将<code>引号</code>中的内容填入<code>Input元素</code>中。需要注意的一点是，<code>send_keys()</code>也可以发送其他如<code>回车(Keys.ENTER)</code>,<code>空格(Keys.SPACE)</code>等键盘上的功能键的指令 ,因此这个函数可以在任何元素上被调用。另外在文本框中文字不会将已有的文字清除，如果文本框中已经有文字，<code>send_keys()</code>只会在已有文字的后面附上新加的文字。因此通常使用此函数在文本框中输入文字时建议先使用<code>.clear()</code>将文字清除。</p><h4 id="选择表单">选择表单</h4><p>Selenium使用户可以获取下拉表单的选项数据，并且使用<code>setSelected</code>来选中特定<code>OPTION标签</code>的元素。可用的选中方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line">select = Select(driver.find_element_by_name(<span class="string">&#x27;name&#x27;</span>)) <span class="comment"># 选中第一个name为&quot;name&quot;的元素</span></span><br><span class="line">select.select_by_index(index) <span class="comment"># 按序号(index)选中表单选项</span></span><br><span class="line">select.select_by_visible_text(<span class="string">&quot;text&quot;</span>) <span class="comment"># 按可见文字选中</span></span><br><span class="line">select.select_by_value(value) <span class="comment"># 按选项值选中</span></span><br></pre></td></tr></table></figure><p>其中<code>select_by_visible_text(&quot;text&quot;)</code>和<code>select_by_value(value)</code>的区别在于，想要选中给定的<code>&lt;option value=&quot;foo&quot;&gt;Bar&lt;/option&gt;</code>这个选项，需要使用<code>select_by_visible_text(&quot;Bar&quot;)</code>或者<code>select_by_value(&quot;foo&quot;)</code>。</p><p>另外，Select类中还有一些非常有用的公式如：</p><ul><li><code>all_selected_option</code>: 用于返回一个select标签下的所有已选项的list。</li><li><code>deselect_all()</code> : 清除所有已选项（仅对支持多选的元素有效）。</li><li><code>options</code>: 返回表单中所有可选项。</li></ul><h4 id="获取文字">获取文字</h4><p>要从网页中爬取文字就一定要用到元素的<code>text</code>属性，该属性即可返回元素中的文字。</p><h2 id="Chrome开发者工具">Chrome开发者工具</h2><p>虽然现在其实我对网页和网络的运作方式还处于一团迷雾的状态，但因为要爬取网页元素，也算是小小接触了<code>Chrome</code>中<code>按F12</code>就可以打开的<code>开发者工具</code>，要写关于网页的脚本这个界面是一定绕不开的。下面我会介绍两个我作为萌新<code>自己乱点摸索出来的</code>对爬虫或自动测试非常有用的两个功能。<strong>因为是自己摸索，所以很有可能走了弯路都不自知。如果有更好的方法，或者完整的玩转F12的指南手册，还希望各位大佬在评论区不吝赐教。</strong></p><h3 id="在网页文件中定位元素">在网页文件中定位元素</h3><p>刚刚接触开发者工具的时候完全不知道如何在花里胡哨的html文件中找到网页中的某个元素，只知道在body里面一个一个往下找，对应着页面上的高亮一点一点往里点，后来才知道原来用Chrome的<code>这个功能</code>就可以快速定位到元素在html文件中的位置，非常方便。这是全世界都知道所以才没有被任何教程提及吗？</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220224195103131.png" alt="按下这个“定位”按钮再点想找的元素就可以定位到该元素在html中的位置"></p><h3 id="得到元素的XPath">得到元素的XPath</h3><p>同样也是一个大概所有人都知道(所以没有在任何教程里见到提及)，但我是自己玩了老半天才偶然发现的功能。原来在开发者工具中右键点击元素，找到<code>复制→复制XPath</code>就可以直接得到这个元素相对路径的XPath，不确定Chrome的算法是怎样，但似乎这个复制XPath是在尽量选择<code>不会导致ambiguity</code>的方式引用。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220224195027232.png" alt="对元素点击右键，然后依次按复制→复制XPath"></p><h1>最后</h1><p>因为这个项目的机会，我对网页自动测试甚至是爬取网页的经验又增加了不少（当然我知道一般爬取网页的首选项肯定是<code>BeautifulSoup</code>，毕竟不经过浏览器互动的爬取会稳定不少，但现如今大部分的网页不用浏览器互动已经啥都爬不到了）。另外之后有时间我会再把项目前半部分关于<code>Cosine Similarity</code>文本相似度匹配的部分整理好再发一篇。</p><p>[第4篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/">编程算法</category>
      
      
      <category domain="http://raylei.space/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/">工作学习</category>
      
      <category domain="http://raylei.space/tags/Python/">Python</category>
      
      <category domain="http://raylei.space/tags/Selenium/">Selenium</category>
      
      
      <comments>http://raylei.space/2022/02/21/4-Selenium_documentation_learning/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[MS Office] 设计Excel报告模板动态展示前n项产品</title>
      <link>http://raylei.space/2022/02/19/3-excel-tool-develop-1/</link>
      <guid>http://raylei.space/2022/02/19/3-excel-tool-develop-1/</guid>
      <pubDate>Sat, 19 Feb 2022 05:03:53 GMT</pubDate>
      
      <description>[第3篇]记录最近工作中设计的一个Excel模板的设计到实现方法，工具目的是将导出的月度数据直接按产品YTD保费量排行展示。</description>
      
      
      
      <content:encoded><![CDATA[<p><font size=4><mark class="hl-label default">特别声明</mark> </font></p><mark class="hl-label default">本文中的出现的数据均经过随机扭曲处理，仅工具排版，逻辑与公式可供参考。</mark> <hr><h1>序言</h1><p>上周为公司的月度保费报告做了一些升级调整，主要是涉及产品保费量展示部分由以前的<code>静态展示固定产品保费</code>改为<code>按保费量动态展示产品排行</code>。其中涉及的Excel公式技巧包括但不限于<code>OFFSET应用</code>，<code>动态排名展示</code>，<code>合并单元格文字</code>等。</p><p>原工具中有三张表格，其中有互相参考验证数据正确性的<code>Tracking cells</code>，这里面我只讲稍微复杂一些的最后一张，且数据经过随机数扭曲，所以本文中展示的表格中的<code>Tracking cells</code>不会正常显示。</p><h1>正文</h1><p>该工具的最终目的是使用系统中生成的原始数据利用excel的公式功能自动整理计算数据并以要求形式展示。工具的目的是为了减少人力成本，因此一个原则是尽最大可能减少工具使用人在工具定板后使用时投入的成本，在此原则之上再尽力减少制作工具本身需要的时间和精力成本。本篇中我会分别介绍这个工具的版面设计以及从已有数据结构到需求的展示样式的逐步实现方法以及其中设计的一些可以广泛应用的小技巧。</p><h2 id="工具版面设计">工具版面设计</h2><p>我设计Excel工具时一个习惯的guideline是将数据分为至少三个部分：</p><ol><li>不改变原数据的结构，以所得即所用的原则组成一个<code>数据输入区</code>，用这样的数据做成的工具可以减少该工具在后续使用中对使用人<code>“调整原数据”</code>的需求，从而降低使用成本。</li><li>将数据以标准形式整理并计算的<code>数据处理区</code>，这个部分通常会包含标准化的数据分类，这样做的目的是将原数据在该区域内透明地以标准化方式整理计算，以方便后续数据展示，并使各部分公式易于阅读和后续维护修改。</li><li>最后是数据的输出形式，即<code>数据展示区</code>，这个部分通常是按<code>数据使用人</code>的需求调整，也即在工具制作期间制作人通常不能控制的部分，我们最后的目的就是将处理好的数据按使用人需求展示。</li></ol><p>本工具的版面既是根据上述习惯排版：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/img_20220220131551.png" alt="工具版面分为“数据输入区”，“数据处理区”和“数据展示区”三个部分"></p><h2 id="工具设计思路">工具设计思路</h2><p>在开始设计工具之前需要理清最重要的两点，第一是到手的原数据结构，第二就是最终需要展示的信息。在这个案例中，我们提取出来的原数据为月度数据，包含信息有4列，分别是<code>险种</code>，<code>新/续业务</code>，<code>本/上年信息</code>以及<code>保费</code>本身。其中每个险种分别会有本/上年的新/续业务保费，这样<code>2x2=4</code>种的组合。因此可以知道标准格式中只需要包含<code>所有可能险种数x4</code>行既可以展示所有可能的输入组合。</p><p>此时开始分析需要展示的信息，所需展示的信息可以分为3部分：首先是将险种按当前年度总保费的大小排名并展示前8个险种，将此之外的保费信息加总归入<code>Other</code>类。其次将各月保费按需求的时间维度分组加总展示(如月度，季度，半年度，当前合计等)。最后只需要动态地将未展示出来的险种名合并展示作为备注即可。</p><p>为满足该需求，我的设计是将保费性质信息作为标准化维度放在数据处理区的最左边并以月份为列名排列所有数据输入区的数据，排列后在处理区将各险种按当年保费(新续业务加总)排出大小并标识，最后在展示区以<code>OFFSET</code>为引用处理区不同月度数据的方法，以降低制作工具本身所需的时间，提高公式的<code>可读性</code>和<code>修改弹性</code>。</p><h2 id="实现方法">实现方法</h2><p>此章中我不会事无巨细介绍所有出现的技巧，如果想要详细了解建议在最后链接中下载该工具样本自己研究，我的公式应该都是trackable的，这里我只会分别介绍几个可以广泛应用到其他需求中的方法和公式。</p><h3 id="如何跳行-列引用数据">如何跳行/列引用数据</h3><p>这是制作该工具时我使用的第一个小技巧，答案非常简单，既是<code>OFFSET</code>。在工具中可以看到，原数据中每月数据有4列信息，而数据处理区中我们只希望每1列展示一个月信息，这样导致的问题是如果不使用OFFSET而将处理区中的<code>SUMIFS</code>公式直接向右复制，则会使每个引用信息仅向右移动1列，从而导致<code>引用区域错位</code>。因此我们需要左边处理区每向右移动1列，公式中的引用区同步向右移动4列，才能将所有引用信息移动至原数据中的<code>下月中相应区域</code>。</p><p>以处理区中最左上角的公式为例：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220220151308158.png" alt="=SUMIFS(OFFSET($VV$177,,EUU$177,,ED30,OFFSET($TT$177,,EC30,OFFSET($SS$177,,EB30)/1000000"></p><blockquote><p>=SUMIFS(OFFSET($V<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>V$177,E<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>28</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>O</mi><mi>F</mi><mi>F</mi><mi>S</mi><mi>E</mi><mi>T</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">28,,),OFFSET(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">28</span><span class="mpunct">,,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">OFFSET</span><span class="mopen">(</span></span></span></span>U<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>U$177,E<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>28</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">28,,),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">28</span><span class="mpunct">,,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span>D30,OFFSET($T<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>T$177,E<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>28</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">28,,),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">28</span><span class="mpunct">,,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span>C30,OFFSET($S<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>S$177,E<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>28</mn><mo separator="true">,</mo><mo separator="true">,</mo><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">28,,),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">28</span><span class="mpunct">,,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span>B30)/1000000</p></blockquote><p>该公式除去OFFSET便是非常简单的SUMIF公式如下，即将原数据中的信息按标准模板加总排列：</p><blockquote><p>=SUMIFS($V<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>V<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>177</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">177,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">177</span><span class="mpunct">,</span></span></span></span>U<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>U<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>177</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">177,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">177</span><span class="mpunct">,</span></span></span></span>D30,$T<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>T<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>177</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">177,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">177</span><span class="mpunct">,</span></span></span></span>C30,$S<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>S<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>177</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">177,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">177</span><span class="mpunct">,</span></span></span></span>B30)/1000000</p></blockquote><p>那么OFFSET是怎么用的呢？OFFSET函数本身的作用就是以公式参数的方法来移动改变引用区域，他的参数如下：</p><blockquote><p>=OFFSET(Reference, rows, cols, [height],[width])</p></blockquote><p>其中<code>Reference</code>为引用的区域，后面的四个参数分别代表在<code>Reference</code>的基础上要移动的<code>行数</code>，<code>列数</code>，<code>高度</code>，<code>宽度</code>，<code>正数代表向右/向下，负数反之</code>。</p><p>以我们的公式为例，<code>OFFSET($V$30:$V$177,,E$28,,)</code>即代表将<code>$V$30:$V$177</code>移动<code>E$28</code>标注的列数(此处为0，即不移动)，其他参数未设置则用<code>,</code>隔开。到这里我只需要将每个月的列上以等差数列向右排列引用所需移动的列数，即可以一个公式为每个月需要引用的原数据找到正确的引用位置。同样的方法在<code>数据展示区</code>也大量的使用，因此可以用一个公式以改变最少参数的方法来填入表格中。</p><p>OFFSET这样的公式非常明显，是为了减轻工具制作和维护的成本而存在的，因为用到不同的公式越少，后期维护时就越简单，毕竟这里你也可以选择人手将不同月份的引用区域拖动到他们合适的位置，不过制作和维护的成本将大大增加。</p><h3 id="仅对当前第一次出现的元素计算">仅对当前第一次出现的元素计算</h3><p>我们想要将产品按当前合计保费量排名，也即将当年的新/续保费加总并排名，但我们却不能直接使用SUMIF加总，因为按照我的版面设计，如果直接全部加总排行时每个产品会有两个相同的保费，从而影响排行名次。因此我们要想办法使每个产品名后仅出现一个加总保费。好在我们的数据处理区是标准化设计，上半部分全部是当年数据且每个险种按NB-RN的顺序规律排列。因此我们可以是用公式从上至下仅仅对该元素第一次出现时进行计算。</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220220152214570.png" alt="=IF(COUNTIF($BB30,$B30)=1,SUM(OFFSET(E30:P30,,,2,)),0)"></p><blockquote><p>=IF(COUNTIF($B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>B30,$B30)=1,SUM(OFFSET(E30:P30,2,)),0)</p></blockquote><p>这个公式分为两个部分，其中<code>IF</code>部分为重点，即判断语句<code>COUNTIF($B$30:$B30,$B30)=1</code>。需要注意其中<code>$B$30:$B30</code>中<code>:</code>后的<code>B30</code>仅仅固定了列数，因此该公式在下拉时该引用区域也会相应拉长。这就使得这个<code>COUNTIF</code>公式可以实现计算<code>从上到下到目前为止B列该元素出现过的次数</code>。而此时将判断语句写为<code>该COUNTIF为1</code>则表示从上到下第一次出现这个元素时，则计算后面的<code>SUM(OFFSET(E30:P30,,,2,))</code>，否则返回0。</p><p>这个<code>SUM</code>函数中的<code>OFFSET</code> 的<code>height</code>参数被设置为<code>2</code>，因此加总包括该引用处在内的向下共<code>2</code>个单元格。以此实现每个出现的产品进行一次NB和RN的数值加总。</p><h3 id="将出现过的数字按大小排名">将出现过的数字按大小排名</h3><p>上一步中我们已经得到了每一个产品的当年总保费，那么使用<code>RANK.EQ</code>函数既可以对保费量进行排名从而使每个险种得到一个相应的排名。本来此时在展示区左边我只需要手动输入1,2,3便可以自动展示排名为1,2,3的产品名，但此处有一个特殊需求，那就是由于下架，要将PAM这个产品的除出排名，直接并入Other分类。但由于PAM还是有续保保费，因此它每个月的保费量也并不是固定的，虽然我可以使用<code>IF</code>函数将<code>PAM</code>的排名直接设定为<code>999</code>，但我们依然需要一个可以动态将已有数字从小到大排列的方法，否则会出现的问题是假设<code>PAM</code>实际排名是<code>6</code>，但它被公式设定为排名<code>999</code>，这会导致手动输入的<code>6</code>后面将没有可以引用的数据，我们需要自动将上方排列设置为4,5,7来跳过排名为<code>6</code>的<code>PAM</code>。</p><p>我想到的办法是SMALL公式：</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220220153736776.png" alt="=SMALL($AA$103,ROW(A2)/2)"></p><blockquote><p>=SMALL($A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>A$103,ROW(A2)/2)</p></blockquote><p>该公式可用参数为<code>SMALL(array,k)</code>，其作用既是返回该数据中第<code>K</code>个最小值，同理的还有<code>LARGE</code>函数。</p><p>在这里的使用方法既是展示<code>在数据处理区中出现的排行数中排行第ROW(A2)/2的最小值</code>，使用<code>ROW(A2)</code>就可以使该<code>K</code>值随着公式的下拉而增加，<code>ROW(A2)</code>返回的是<code>A2</code>单元格的行数，也即<code>2</code>。该数值<code>/2</code>则可以使每个数值出现两次，以此匹配每个险种名显示两次以匹配NB和RN这两行数据，因为<code>A2</code>和<code>A3</code>两行的计算结果分别是<code>1</code>和<code>1.5</code>，都会被公式向下取整认定为<code>1</code>，同理如果希望数值重复<code>N</code>次，则<code>/N</code>即可实现，注意不要让商小于<code>1</code>。</p><h3 id="IF公式的数组应用">IF公式的数组应用</h3><p>最后的一个展示要求是将Other分类中，也即保费排名未在前八位但本年有保费收入的产品名备注出来:</p><p><img src="https://cdn.jsdelivr.net/gh/0Rayhlei0/Pics/post_img/image-20220220170737896.png" alt="=CONCAT(&quot;*The Other Products contains &quot;,IF(($QQAAAABB$103,3)&amp;&quot;, &quot;,&quot;&quot;))"></p><blockquote><p>=CONCAT(“*The Other Products contains “,IF(($Q<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>Q<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>103</mn><mo>&lt;</mo><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">103&lt;&gt;0)*(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">103</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>103</mn><mo>&gt;</mo><mi>M</mi><mi>A</mi><mi>X</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">103&gt;MAX(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">103</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">6:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>21</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>L</mi><mi>E</mi><mi>F</mi><mi>T</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">21)),LEFT(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">21</span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">EFT</span><span class="mopen">(</span></span></span></span>B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>B$103,3)&amp;”, “,””))</p></blockquote><p>这个公式中的主要知识点便是<strong>IF公式的数组应用</strong></p><blockquote><p>IF(($Q<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>Q<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>103</mn><mo>&lt;</mo><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">103&lt;&gt;0)*(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">103</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>103</mn><mo>&gt;</mo><mi>M</mi><mi>A</mi><mi>X</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">103&gt;MAX(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">103</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">6:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>21</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>L</mi><mi>E</mi><mi>F</mi><mi>T</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">21)),LEFT(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">21</span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">EFT</span><span class="mopen">(</span></span></span></span>B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mo>:</mo></mrow><annotation encoding="application/x-tex">30:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span>B$103,3)&amp;“, “,””)</p></blockquote><p>该公式的<code>重点</code>，也是<mark class="hl-label red">难点</mark> ，便是条件语句部分的<code>($Q$30:$Q$103&lt;&gt;0)*($A$30:$A$103&gt;MAX($A$6:$A$21))</code>,此处的乘法操作是为了筛选出该范围中同时满足两个条件的行数，因为Excel中所有<code>1等价于TRUE，0等价于FALSE</code>，因此此时两个判断语句的结果每行相乘，只有两个判断均为<code>TRUE</code>时，产生的结果才是<code>TRUE</code>。（0乘0或0乘1都是0这个很好理解吧）这时<code>IF</code>函数返回的数组既是所有同时满足这两个条件的行(两个1相乘才返回1)，即当年总保费不为0且排名大于展示区所有排名的产品代码。最后用<code>CONCAT</code>函数便可以将数组返回的数据组合在一个单元格中。</p><h1>最后</h1><p>这个看似简单的数据工具却花了我将近一天的时间设计调整，其中的公式都是我自己根据自己的知识储备自己琢磨出来的，因此很难说参考了哪些资料，如果一定要说的话大概就是<code>Michael Alexander</code>的<code>Excel 2019 Bible</code>吧，当年入坑Excel的参考书就这一本，但也非常足够了。</p><p>该工具的一个副本放在这里,有兴趣可以看看：<a href="/attachment/Product_ranking.xlsx">下载链接</a></p><p>[第3篇]</p>]]></content:encoded>
      
      
      <category domain="http://raylei.space/categories/MS-Office/">MS Office</category>
      
      
      <category domain="http://raylei.space/tags/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/">工作学习</category>
      
      <category domain="http://raylei.space/tags/Excel/">Excel</category>
      
      
      <comments>http://raylei.space/2022/02/19/3-excel-tool-develop-1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
